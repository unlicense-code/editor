import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { Range } from 'vs/editor/common/core/range';
import { IEditorContribution } from 'vs/editor/common/editorCommon';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { HoverStartMode, HoverStartSource } from 'vs/editor/contrib/hover/browser/hoverOperation';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import 'vs/css!./hover';
export declare class ModesHoverController implements IEditorContribution {
    private readonly _editor;
    private readonly _instantiationService;
    private readonly _openerService;
    private readonly _languageService;
    static readonly ID = "editor.contrib.hover";
    private readonly _toUnhook;
    private readonly _didChangeConfigurationHandler;
    private _contentWidget;
    private _glyphWidget;
    private _isMouseDown;
    private _hoverClicked;
    private _isHoverEnabled;
    private _isHoverSticky;
    static get(editor: ICodeEditor): ModesHoverController | null;
    constructor(_editor: ICodeEditor, _instantiationService: IInstantiationService, _openerService: IOpenerService, _languageService: ILanguageService, _contextKeyService: IContextKeyService);
    private _hookEvents;
    private _unhookEvents;
    private _onEditorScrollChanged;
    private _onEditorMouseDown;
    private _onEditorMouseUp;
    private _onEditorMouseLeave;
    private _onEditorMouseMove;
    private _onKeyDown;
    private _hideWidgets;
    private _getOrCreateContentWidget;
    isColorPickerVisible(): boolean;
    showContentHover(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean): void;
    dispose(): void;
}

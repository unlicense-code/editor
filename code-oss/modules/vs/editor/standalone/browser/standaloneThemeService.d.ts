import { Color } from 'vs/base/common/color';
import { IStandaloneTheme, IStandaloneThemeData, IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneTheme';
import { IFileIconTheme, IProductIconTheme } from 'vs/platform/theme/common/themeService';
import { IDisposable, Disposable } from 'vs/base/common/lifecycle';
export declare const VS_LIGHT_THEME_NAME = "vs";
export declare const VS_DARK_THEME_NAME = "vs-dark";
export declare const HC_BLACK_THEME_NAME = "hc-black";
export declare const HC_LIGHT_THEME_NAME = "hc-light";
export declare class StandaloneThemeService extends Disposable implements IStandaloneThemeService {
    readonly _serviceBrand: undefined;
    private readonly _onColorThemeChange;
    readonly onDidColorThemeChange: import("vs/base/common/event").Event<IStandaloneTheme>;
    private readonly _onFileIconThemeChange;
    readonly onDidFileIconThemeChange: import("vs/base/common/event").Event<IFileIconTheme>;
    private readonly _onProductIconThemeChange;
    readonly onDidProductIconThemeChange: import("vs/base/common/event").Event<IProductIconTheme>;
    private readonly _environment;
    private readonly _knownThemes;
    private _autoDetectHighContrast;
    private _codiconCSS;
    private _themeCSS;
    private _allCSS;
    private _globalStyleElement;
    private _styleElements;
    private _colorMapOverride;
    private _theme;
    private _builtInProductIconTheme;
    constructor();
    registerEditorContainer(domNode: HTMLElement): IDisposable;
    private _registerRegularEditorContainer;
    private _registerShadowDomContainer;
    defineTheme(themeName: string, themeData: IStandaloneThemeData): void;
    getColorTheme(): IStandaloneTheme;
    setColorMapOverride(colorMapOverride: Color[] | null): void;
    setTheme(themeName: string): void;
    private _updateActualTheme;
    private _onOSSchemeChanged;
    setAutoDetectHighContrast(autoDetectHighContrast: boolean): void;
    private _updateThemeOrColorMap;
    private _updateCSS;
    getFileIconTheme(): IFileIconTheme;
    getProductIconTheme(): IProductIconTheme;
}

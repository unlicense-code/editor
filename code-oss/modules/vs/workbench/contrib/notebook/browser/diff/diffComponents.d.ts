import { Disposable, DisposableStore } from 'vs/base/common/lifecycle';
import { IEditorOptions } from 'vs/editor/common/config/editorOptions';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { DiffElementViewModelBase, PropertyFoldingState, SideBySideDiffElementViewModel, SingleSideDiffElementViewModel } from 'vs/workbench/contrib/notebook/browser/diff/diffElementViewModel';
import { CellDiffSideBySideRenderTemplate, CellDiffSingleSideRenderTemplate, INotebookTextDiffEditor } from 'vs/workbench/contrib/notebook/browser/diff/notebookDiffEditorBrowser';
import { CodeEditorWidget, ICodeEditorWidgetOptions } from 'vs/editor/browser/widget/codeEditorWidget';
import { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditorWidget';
import { IModelService } from 'vs/editor/common/services/model';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { ToolBar } from 'vs/base/browser/ui/toolbar/toolbar';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IMenu, IMenuService, MenuId } from 'vs/platform/actions/common/actions';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { OutputContainer } from 'vs/workbench/contrib/notebook/browser/diff/diffElementOutputs';
import { ITextModelService } from 'vs/editor/common/services/resolverService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IDiffEditorConstructionOptions } from 'vs/editor/browser/editorBrowser';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { WorkbenchToolBar } from 'vs/platform/actions/browser/toolbar';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
export declare const fixedEditorOptions: IEditorOptions;
export declare function getOptimizedNestedCodeEditorWidgetOptions(): ICodeEditorWidgetOptions;
export declare const fixedDiffEditorOptions: IDiffEditorConstructionOptions;
declare class PropertyHeader extends Disposable {
    readonly cell: DiffElementViewModelBase;
    readonly propertyHeaderContainer: HTMLElement;
    readonly notebookEditor: INotebookTextDiffEditor;
    readonly accessor: {
        updateInfoRendering: (renderOutput: boolean) => void;
        checkIfModified: (cell: DiffElementViewModelBase) => false | {
            reason: string | undefined;
        };
        getFoldingState: (cell: DiffElementViewModelBase) => PropertyFoldingState;
        updateFoldingState: (cell: DiffElementViewModelBase, newState: PropertyFoldingState) => void;
        unChangedLabel: string;
        changedLabel: string;
        prefix: string;
        menuId: MenuId;
    };
    readonly contextMenuService: IContextMenuService;
    readonly keybindingService: IKeybindingService;
    readonly notificationService: INotificationService;
    readonly menuService: IMenuService;
    readonly contextKeyService: IContextKeyService;
    readonly themeService: IThemeService;
    readonly telemetryService: ITelemetryService;
    protected _foldingIndicator: HTMLElement;
    protected _statusSpan: HTMLElement;
    protected _description: HTMLElement;
    protected _toolbar: WorkbenchToolBar;
    protected _menu: IMenu;
    protected _propertyExpanded?: IContextKey<boolean>;
    constructor(cell: DiffElementViewModelBase, propertyHeaderContainer: HTMLElement, notebookEditor: INotebookTextDiffEditor, accessor: {
        updateInfoRendering: (renderOutput: boolean) => void;
        checkIfModified: (cell: DiffElementViewModelBase) => false | {
            reason: string | undefined;
        };
        getFoldingState: (cell: DiffElementViewModelBase) => PropertyFoldingState;
        updateFoldingState: (cell: DiffElementViewModelBase, newState: PropertyFoldingState) => void;
        unChangedLabel: string;
        changedLabel: string;
        prefix: string;
        menuId: MenuId;
    }, contextMenuService: IContextMenuService, keybindingService: IKeybindingService, notificationService: INotificationService, menuService: IMenuService, contextKeyService: IContextKeyService, themeService: IThemeService, telemetryService: ITelemetryService);
    buildHeader(): void;
    refresh(): void;
    private _updateFoldingIcon;
}
interface IDiffElementLayoutState {
    outerWidth?: boolean;
    editorHeight?: boolean;
    metadataEditor?: boolean;
    metadataHeight?: boolean;
    outputTotalHeight?: boolean;
}
declare abstract class AbstractElementRenderer extends Disposable {
    readonly notebookEditor: INotebookTextDiffEditor;
    readonly cell: DiffElementViewModelBase;
    readonly templateData: CellDiffSingleSideRenderTemplate | CellDiffSideBySideRenderTemplate;
    readonly style: 'left' | 'right' | 'full';
    protected readonly instantiationService: IInstantiationService;
    protected readonly languageService: ILanguageService;
    protected readonly modelService: IModelService;
    protected readonly textModelService: ITextModelService;
    protected readonly contextMenuService: IContextMenuService;
    protected readonly keybindingService: IKeybindingService;
    protected readonly notificationService: INotificationService;
    protected readonly menuService: IMenuService;
    protected readonly contextKeyService: IContextKeyService;
    protected readonly configurationService: IConfigurationService;
    protected _metadataLocalDisposable: DisposableStore;
    protected _outputLocalDisposable: DisposableStore;
    protected _ignoreMetadata: boolean;
    protected _ignoreOutputs: boolean;
    protected _metadataHeaderContainer: HTMLElement;
    protected _metadataHeader: PropertyHeader;
    protected _metadataInfoContainer: HTMLElement;
    protected _metadataEditorContainer?: HTMLElement;
    protected _metadataEditorDisposeStore: DisposableStore;
    protected _metadataEditor?: CodeEditorWidget | DiffEditorWidget;
    protected _outputHeaderContainer: HTMLElement;
    protected _outputHeader: PropertyHeader;
    protected _outputInfoContainer: HTMLElement;
    protected _outputEditorContainer?: HTMLElement;
    protected _outputViewContainer?: HTMLElement;
    protected _outputLeftContainer?: HTMLElement;
    protected _outputRightContainer?: HTMLElement;
    protected _outputMetadataContainer?: HTMLElement;
    protected _outputEmptyElement?: HTMLElement;
    protected _outputLeftView?: OutputContainer;
    protected _outputRightView?: OutputContainer;
    protected _outputEditorDisposeStore: DisposableStore;
    protected _outputEditor?: CodeEditorWidget | DiffEditorWidget;
    protected _outputMetadataEditor?: DiffEditorWidget;
    protected _diffEditorContainer: HTMLElement;
    protected _diagonalFill?: HTMLElement;
    protected _isDisposed: boolean;
    constructor(notebookEditor: INotebookTextDiffEditor, cell: DiffElementViewModelBase, templateData: CellDiffSingleSideRenderTemplate | CellDiffSideBySideRenderTemplate, style: 'left' | 'right' | 'full', instantiationService: IInstantiationService, languageService: ILanguageService, modelService: IModelService, textModelService: ITextModelService, contextMenuService: IContextMenuService, keybindingService: IKeybindingService, notificationService: INotificationService, menuService: IMenuService, contextKeyService: IContextKeyService, configurationService: IConfigurationService);
    abstract init(): void;
    abstract styleContainer(container: HTMLElement): void;
    abstract _buildOutput(): void;
    abstract _disposeOutput(): void;
    abstract _buildMetadata(): void;
    abstract _disposeMetadata(): void;
    buildBody(): void;
    updateMetadataRendering(): void;
    updateOutputRendering(renderRichOutput: boolean): void;
    private _buildOutputRawContainer;
    private _showOutputsRaw;
    private _showOutputsEmptyView;
    protected _hideOutputsRaw(): void;
    protected _hideOutputsEmptyView(): void;
    abstract _buildOutputRendererContainer(): void;
    abstract _hideOutputsRenderer(): void;
    abstract _showOutputsRenderer(): void;
    private _applySanitizedMetadataChanges;
    private _buildMetadataEditor;
    private _buildOutputEditor;
    protected layoutNotebookCell(): void;
    updateBorders(): void;
    dispose(): void;
    abstract updateSourceEditor(): void;
    abstract layout(state: IDiffElementLayoutState): void;
}
declare abstract class SingleSideDiffElement extends AbstractElementRenderer {
    readonly cell: SingleSideDiffElementViewModel;
    readonly templateData: CellDiffSingleSideRenderTemplate;
    constructor(notebookEditor: INotebookTextDiffEditor, cell: SingleSideDiffElementViewModel, templateData: CellDiffSingleSideRenderTemplate, style: 'left' | 'right' | 'full', instantiationService: IInstantiationService, languageService: ILanguageService, modelService: IModelService, textModelService: ITextModelService, contextMenuService: IContextMenuService, keybindingService: IKeybindingService, notificationService: INotificationService, menuService: IMenuService, contextKeyService: IContextKeyService, configurationService: IConfigurationService);
    init(): void;
    buildBody(): void;
    _disposeMetadata(): void;
    _buildMetadata(): void;
    _buildOutput(): void;
    _disposeOutput(): void;
}
export declare class DeletedElement extends SingleSideDiffElement {
    private _editor;
    constructor(notebookEditor: INotebookTextDiffEditor, cell: SingleSideDiffElementViewModel, templateData: CellDiffSingleSideRenderTemplate, languageService: ILanguageService, modelService: IModelService, textModelService: ITextModelService, instantiationService: IInstantiationService, contextMenuService: IContextMenuService, keybindingService: IKeybindingService, notificationService: INotificationService, menuService: IMenuService, contextKeyService: IContextKeyService, configurationService: IConfigurationService);
    styleContainer(container: HTMLElement): void;
    updateSourceEditor(): void;
    layout(state: IDiffElementLayoutState): void;
    _buildOutputRendererContainer(): void;
    _decorate(): void;
    _showOutputsRenderer(): void;
    _hideOutputsRenderer(): void;
    dispose(): void;
}
export declare class InsertElement extends SingleSideDiffElement {
    private _editor;
    constructor(notebookEditor: INotebookTextDiffEditor, cell: SingleSideDiffElementViewModel, templateData: CellDiffSingleSideRenderTemplate, instantiationService: IInstantiationService, languageService: ILanguageService, modelService: IModelService, textModelService: ITextModelService, contextMenuService: IContextMenuService, keybindingService: IKeybindingService, notificationService: INotificationService, menuService: IMenuService, contextKeyService: IContextKeyService, configurationService: IConfigurationService);
    styleContainer(container: HTMLElement): void;
    updateSourceEditor(): void;
    _buildOutputRendererContainer(): void;
    _decorate(): void;
    _showOutputsRenderer(): void;
    _hideOutputsRenderer(): void;
    layout(state: IDiffElementLayoutState): void;
    dispose(): void;
}
export declare class ModifiedElement extends AbstractElementRenderer {
    private _editor?;
    private _editorViewStateChanged;
    private _editorContainer;
    private _inputToolbarContainer;
    protected _toolbar: ToolBar;
    protected _menu: IMenu;
    readonly cell: SideBySideDiffElementViewModel;
    readonly templateData: CellDiffSideBySideRenderTemplate;
    constructor(notebookEditor: INotebookTextDiffEditor, cell: SideBySideDiffElementViewModel, templateData: CellDiffSideBySideRenderTemplate, instantiationService: IInstantiationService, languageService: ILanguageService, modelService: IModelService, textModelService: ITextModelService, contextMenuService: IContextMenuService, keybindingService: IKeybindingService, notificationService: INotificationService, menuService: IMenuService, contextKeyService: IContextKeyService, configurationService: IConfigurationService);
    init(): void;
    styleContainer(container: HTMLElement): void;
    _disposeMetadata(): void;
    _buildMetadata(): void;
    _disposeOutput(): void;
    _buildOutput(): void;
    _buildOutputRendererContainer(): void;
    _decorate(): void;
    _showOutputsRenderer(): void;
    _hideOutputsRenderer(): void;
    updateSourceEditor(): void;
    private _initializeSourceDiffEditor;
    layout(state: IDiffElementLayoutState): void;
    dispose(): void;
}
export {};

import * as DOM from 'vs/base/browser/dom';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IEditorOpenContext, IEditorPaneSelection, IEditorPaneSelectionChangeEvent, IEditorPaneWithSelection } from 'vs/workbench/common/editor';
import { NotebookEditorWidget } from 'vs/workbench/contrib/notebook/browser/notebookEditorWidget';
import { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';
import { NotebookDiffEditorInput } from '../../common/notebookDiffEditorInput';
import { CancellationToken } from 'vs/base/common/cancellation';
import { DiffElementViewModelBase } from 'vs/workbench/contrib/notebook/browser/diff/diffElementViewModel';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { INotebookEditorWorkerService } from 'vs/workbench/contrib/notebook/common/services/notebookWorkerService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { FontInfo } from 'vs/editor/common/config/fontInfo';
import { CellEditState, ICellOutputViewModel, IGenericCellViewModel, IInsetRenderOutput, INotebookEditorCreationOptions, INotebookEditorOptions } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';
import { DiffSide, IDiffCellInfo, INotebookTextDiffEditor } from 'vs/workbench/contrib/notebook/browser/diff/notebookDiffEditorBrowser';
import { Emitter, Event } from 'vs/base/common/event';
import { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';
import { INotebookDiffEditorModel, INotebookDiffResult } from 'vs/workbench/contrib/notebook/common/notebookCommon';
import { IDiffChange, IDiffResult } from 'vs/base/common/diff/diff';
import { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';
import { IMouseWheelEvent } from 'vs/base/browser/mouseEvent';
import { DiffNestedCellViewModel } from 'vs/workbench/contrib/notebook/browser/diff/diffNestedCellViewModel';
import { INotebookDelegateForWebview } from 'vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView';
import { NotebookDiffEditorEventDispatcher } from 'vs/workbench/contrib/notebook/browser/diff/eventDispatcher';
import { NotebookOptions } from 'vs/workbench/contrib/notebook/common/notebookOptions';
import { INotebookExecutionStateService } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';
import { NotebookLayoutInfo } from 'vs/workbench/contrib/notebook/browser/notebookViewEvents';
export declare class NotebookTextDiffEditor extends EditorPane implements INotebookTextDiffEditor, INotebookDelegateForWebview, IEditorPaneWithSelection {
    readonly instantiationService: IInstantiationService;
    readonly contextKeyService: IContextKeyService;
    readonly notebookEditorWorkerService: INotebookEditorWorkerService;
    private readonly configurationService;
    static readonly ENTIRE_DIFF_OVERVIEW_WIDTH = 30;
    creationOptions: INotebookEditorCreationOptions;
    static readonly ID: string;
    private _rootElement;
    private _listViewContainer;
    private _overflowContainer;
    private _overviewRulerContainer;
    private _overviewRuler;
    private _dimension;
    private _diffElementViewModels;
    private _list;
    private _modifiedWebview;
    private _originalWebview;
    private _webviewTransparentCover;
    private _fontInfo;
    private readonly _onMouseUp;
    readonly onMouseUp: Event<{
        readonly event: MouseEvent;
        readonly target: DiffElementViewModelBase;
    }>;
    private readonly _onDidScroll;
    readonly onDidScroll: Event<void>;
    private _eventDispatcher;
    protected _scopeContextKeyService: IContextKeyService;
    private _model;
    private readonly _modifiedResourceDisposableStore;
    get textModel(): NotebookTextModel | undefined;
    private _revealFirst;
    private readonly _insetModifyQueueByOutputId;
    protected _onDidDynamicOutputRendered: Emitter<{
        cell: IGenericCellViewModel;
        output: ICellOutputViewModel;
    }>;
    onDidDynamicOutputRendered: Event<{
        cell: IGenericCellViewModel;
        output: ICellOutputViewModel;
    }>;
    private _notebookOptions;
    get notebookOptions(): NotebookOptions;
    private readonly _localStore;
    private _layoutCancellationTokenSource?;
    private readonly _onDidChangeSelection;
    readonly onDidChangeSelection: Event<IEditorPaneSelectionChangeEvent>;
    private _isDisposed;
    get isDisposed(): boolean;
    constructor(instantiationService: IInstantiationService, themeService: IThemeService, contextKeyService: IContextKeyService, notebookEditorWorkerService: INotebookEditorWorkerService, configurationService: IConfigurationService, telemetryService: ITelemetryService, storageService: IStorageService, notebookExecutionStateService: INotebookExecutionStateService);
    private isOverviewRulerEnabled;
    getSelection(): IEditorPaneSelection | undefined;
    toggleNotebookCellSelection(cell: IGenericCellViewModel): void;
    focusNotebookCell(cell: IGenericCellViewModel, focus: 'output' | 'editor' | 'container'): Promise<void>;
    focusNextNotebookCell(cell: IGenericCellViewModel, focus: 'output' | 'editor' | 'container'): Promise<void>;
    getScrollTop(): number;
    getScrollHeight(): number;
    delegateVerticalScrollbarPointerDown(browserEvent: PointerEvent): void;
    updateOutputHeight(cellInfo: IDiffCellInfo, output: ICellOutputViewModel, outputHeight: number, isInit: boolean): void;
    setMarkupCellEditState(cellId: string, editState: CellEditState): void;
    didStartDragMarkupCell(cellId: string, event: {
        dragOffsetY: number;
    }): void;
    didDragMarkupCell(cellId: string, event: {
        dragOffsetY: number;
    }): void;
    didEndDragMarkupCell(cellId: string): void;
    didDropMarkupCell(cellId: string): void;
    didResizeOutput(cellId: string): void;
    protected createEditor(parent: HTMLElement): void;
    private _registerOverviewRuler;
    private _updateOutputsOffsetsInWebview;
    setInput(input: NotebookDiffEditorInput, options: INotebookEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    private _detachModel;
    private _attachModel;
    private _createModifiedWebview;
    _generateFontFamily(): string;
    private _createOriginalWebview;
    setOptions(options: INotebookEditorOptions | undefined): void;
    updateLayout(token: CancellationToken, selections?: number[]): Promise<void>;
    private _isViewModelTheSame;
    private _setViewModel;
    /**
     * making sure that swapping cells are always translated to `insert+delete`.
     */
    static prettyChanges(model: INotebookDiffEditorModel, diffResult: IDiffResult): void;
    static computeDiff(instantiationService: IInstantiationService, configurationService: IConfigurationService, model: INotebookDiffEditorModel, eventDispatcher: NotebookDiffEditorEventDispatcher, diffResult: INotebookDiffResult): {
        viewModels: DiffElementViewModelBase[];
        firstChangeIndex: number;
    };
    static computeModifiedLCS(instantiationService: IInstantiationService, change: IDiffChange, originalModel: NotebookTextModel, modifiedModel: NotebookTextModel, eventDispatcher: NotebookDiffEditorEventDispatcher, initData: {
        metadataStatusHeight: number;
        outputStatusHeight: number;
    }): DiffElementViewModelBase[];
    scheduleOutputHeightAck(cellInfo: IDiffCellInfo, outputId: string, height: number): void;
    private pendingLayouts;
    layoutNotebookCell(cell: DiffElementViewModelBase, height: number): Promise<void>;
    setScrollTop(scrollTop: number): void;
    triggerScroll(event: IMouseWheelEvent): void;
    createOutput(cellDiffViewModel: DiffElementViewModelBase, cellViewModel: DiffNestedCellViewModel, output: IInsetRenderOutput, getOffset: () => number, diffSide: DiffSide): void;
    updateMarkupCellHeight(): void;
    getCellByInfo(cellInfo: IDiffCellInfo): IGenericCellViewModel;
    getCellById(cellId: string): IGenericCellViewModel | undefined;
    removeInset(cellDiffViewModel: DiffElementViewModelBase, cellViewModel: DiffNestedCellViewModel, displayOutput: ICellOutputViewModel, diffSide: DiffSide): void;
    showInset(cellDiffViewModel: DiffElementViewModelBase, cellViewModel: DiffNestedCellViewModel, displayOutput: ICellOutputViewModel, diffSide: DiffSide): void;
    hideInset(cellDiffViewModel: DiffElementViewModelBase, cellViewModel: DiffNestedCellViewModel, output: ICellOutputViewModel): void;
    getDomNode(): HTMLElement;
    getOverflowContainerDomNode(): HTMLElement;
    getControl(): NotebookEditorWidget | undefined;
    setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void;
    focus(): void;
    clearInput(): void;
    deltaCellOutputContainerClassNames(diffSide: DiffSide, cellId: string, added: string[], removed: string[]): void;
    getLayoutInfo(): NotebookLayoutInfo;
    getCellOutputLayoutInfo(nestedCell: DiffNestedCellViewModel): NotebookLayoutInfo | {
        width: number;
        height: number;
        fontInfo: FontInfo;
    };
    layout(dimension: DOM.Dimension): void;
    dispose(): void;
}

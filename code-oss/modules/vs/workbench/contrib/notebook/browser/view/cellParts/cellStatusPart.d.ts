import { Emitter, Event } from 'vs/base/common/event';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { INotebookCellActionContext } from 'vs/workbench/contrib/notebook/browser/controller/coreActions';
import { ICellViewModel, INotebookEditorDelegate } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';
import { CellContentPart } from 'vs/workbench/contrib/notebook/browser/view/cellPart';
import { IClickTarget } from 'vs/workbench/contrib/notebook/browser/view/cellParts/cellWidgets';
export declare class CellEditorStatusBar extends CellContentPart {
    private readonly _notebookEditor;
    private readonly _cellContainer;
    private readonly _editor;
    private readonly _instantiationService;
    private readonly _themeService;
    readonly statusBarContainer: HTMLElement;
    private readonly leftItemsContainer;
    private readonly rightItemsContainer;
    private readonly itemsDisposable;
    private leftItems;
    private rightItems;
    private width;
    private currentContext;
    protected readonly _onDidClick: Emitter<IClickTarget>;
    readonly onDidClick: Event<IClickTarget>;
    constructor(_notebookEditor: INotebookEditorDelegate, _cellContainer: HTMLElement, editorPart: HTMLElement, _editor: ICodeEditor | undefined, _instantiationService: IInstantiationService, _themeService: IThemeService);
    didRenderCell(element: ICellViewModel): void;
    updateInternalLayoutNow(element: ICellViewModel): void;
    private getMaxItemWidth;
    updateContext(context: INotebookCellActionContext): void;
    private updateActiveCell;
    private updateRenderedItems;
    dispose(): void;
}

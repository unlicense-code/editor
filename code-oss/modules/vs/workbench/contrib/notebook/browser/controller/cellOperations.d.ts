import { IBulkEditService, ResourceEdit } from 'vs/editor/browser/services/bulkEditService';
import { IPosition } from 'vs/editor/common/core/position';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { INotebookActionContext, INotebookCellActionContext } from 'vs/workbench/contrib/notebook/browser/controller/coreActions';
import { IActiveNotebookEditor, ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';
import { CellViewModel, NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModelImpl';
import { CellKind, IOutputDto, NotebookCellMetadata } from 'vs/workbench/contrib/notebook/common/notebookCommon';
import { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';
export declare function changeCellToKind(kind: CellKind, context: INotebookActionContext, language?: string, mime?: string): Promise<void>;
export declare function runDeleteAction(editor: IActiveNotebookEditor, cell: ICellViewModel): void;
export declare function moveCellRange(context: INotebookCellActionContext, direction: 'up' | 'down'): Promise<void>;
export declare function copyCellRange(context: INotebookCellActionContext, direction: 'up' | 'down'): Promise<void>;
export declare function joinNotebookCells(editor: IActiveNotebookEditor, range: ICellRange, direction: 'above' | 'below', constraint?: CellKind): Promise<{
    edits: ResourceEdit[];
    cell: ICellViewModel;
    endFocus: ICellRange;
    endSelections: ICellRange[];
} | null>;
export declare function joinCellsWithSurrounds(bulkEditService: IBulkEditService, context: INotebookCellActionContext, direction: 'above' | 'below'): Promise<void>;
export declare function computeCellLinesContents(cell: ICellViewModel, splitPoints: IPosition[]): string[] | null;
export declare function insertCell(languageService: ILanguageService, editor: IActiveNotebookEditor, index: number, type: CellKind, direction?: 'above' | 'below', initialText?: string, ui?: boolean): CellViewModel | null;
export declare function insertCellAtIndex(viewModel: NotebookViewModel, index: number, source: string, language: string, type: CellKind, metadata: NotebookCellMetadata | undefined, outputs: IOutputDto[], synchronous: boolean, pushUndoStop: boolean): CellViewModel;

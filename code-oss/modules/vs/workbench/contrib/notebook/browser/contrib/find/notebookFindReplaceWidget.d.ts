import * as dom from 'vs/base/browser/dom';
import { FindInput, IFindInputOptions } from 'vs/base/browser/ui/findinput/findInput';
import { ReplaceInput } from 'vs/base/browser/ui/findinput/replaceInput';
import { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';
import { Widget } from 'vs/base/browser/ui/widget';
import 'vs/css!./notebookFindReplaceWidget';
import { FindReplaceState } from 'vs/editor/contrib/find/browser/findState';
import { SimpleButton } from 'vs/editor/contrib/find/browser/findWidget';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IContextMenuService, IContextViewService } from 'vs/platform/contextview/browser/contextView';
import { IColorTheme, ThemeIcon } from 'vs/platform/theme/common/themeService';
import { ReplacePattern } from 'vs/editor/contrib/find/browser/replacePattern';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IAction } from 'vs/base/common/actions';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMenu, IMenuService } from 'vs/platform/actions/common/actions';
import { IContextViewProvider } from 'vs/base/browser/ui/contextview/contextview';
import { NotebookFindFilters } from 'vs/workbench/contrib/notebook/browser/contrib/find/findFilters';
import { INotebookEditor } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';
export declare const findFilterButton: ThemeIcon;
declare class NotebookFindInput extends FindInput {
    readonly filters: NotebookFindFilters;
    readonly contextMenuService: IContextMenuService;
    readonly instantiationService: IInstantiationService;
    private _filterButtonContainer;
    private _actionbar;
    private _filterChecked;
    private _filtersAction;
    constructor(filters: NotebookFindFilters, contextKeyService: IContextKeyService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService, parent: HTMLElement | null, contextViewProvider: IContextViewProvider, options: IFindInputOptions);
    private getFilterWidth;
    private createFilters;
    setEnabled(enabled: boolean): void;
    updateFilterState(changed: boolean): void;
    protected applyStyles(): void;
    getCellToolbarActions(menu: IMenu): {
        primary: IAction[];
        secondary: IAction[];
    };
}
export declare abstract class SimpleFindReplaceWidget extends Widget {
    private readonly _contextViewService;
    protected readonly _configurationService: IConfigurationService;
    readonly menuService: IMenuService;
    readonly contextMenuService: IContextMenuService;
    readonly instantiationService: IInstantiationService;
    protected readonly _state: FindReplaceState<NotebookFindFilters>;
    protected readonly _notebookEditor: INotebookEditor;
    protected readonly _findInput: NotebookFindInput;
    private readonly _domNode;
    private readonly _innerFindDomNode;
    private readonly _focusTracker;
    private readonly _findInputFocusTracker;
    private readonly _updateHistoryDelayer;
    protected readonly _matchesCount: HTMLElement;
    private readonly prevBtn;
    private readonly nextBtn;
    protected readonly _replaceInput: ReplaceInput;
    private readonly _innerReplaceDomNode;
    private _toggleReplaceBtn;
    private readonly _replaceInputFocusTracker;
    protected _replaceBtn: SimpleButton;
    protected _replaceAllBtn: SimpleButton;
    private readonly _resizeSash;
    private _resizeOriginalWidth;
    private _isVisible;
    private _isReplaceVisible;
    private foundMatch;
    protected _progressBar: ProgressBar;
    protected _scopedContextKeyService: IContextKeyService;
    private _filters;
    constructor(_contextViewService: IContextViewService, contextKeyService: IContextKeyService, _configurationService: IConfigurationService, menuService: IMenuService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService, _state: FindReplaceState<NotebookFindFilters>, _notebookEditor: INotebookEditor);
    private _getMaxWidth;
    private _getDomWidth;
    getCellToolbarActions(menu: IMenu): {
        primary: IAction[];
        secondary: IAction[];
    };
    protected abstract onInputChanged(): boolean;
    protected abstract find(previous: boolean): void;
    protected abstract findFirst(): void;
    protected abstract replaceOne(): void;
    protected abstract replaceAll(): void;
    protected abstract onFocusTrackerFocus(): void;
    protected abstract onFocusTrackerBlur(): void;
    protected abstract onFindInputFocusTrackerFocus(): void;
    protected abstract onFindInputFocusTrackerBlur(): void;
    protected abstract onReplaceInputFocusTrackerFocus(): void;
    protected abstract onReplaceInputFocusTrackerBlur(): void;
    protected get inputValue(): string;
    protected get replaceValue(): string;
    protected get replacePattern(): ReplacePattern;
    get focusTracker(): dom.IFocusTracker;
    updateTheme(theme: IColorTheme): void;
    private _onStateChanged;
    private _updateButtons;
    protected _updateMatchesCount(): void;
    dispose(): void;
    getDomNode(): HTMLElement;
    reveal(initialInput?: string): void;
    focus(): void;
    show(initialInput?: string, options?: {
        focus?: boolean;
    }): void;
    showWithReplace(initialInput?: string, replaceInput?: string): void;
    hide(): void;
    protected _delayedUpdateHistory(): void;
    protected _updateHistory(): void;
    protected _getRegexValue(): boolean;
    protected _getWholeWordValue(): boolean;
    protected _getCaseSensitiveValue(): boolean;
    protected updateButtons(foundMatch: boolean): void;
}
export {};

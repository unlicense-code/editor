import 'vs/css!./media/walkThroughPart';
import { IEditorOpenContext } from 'vs/workbench/common/editor';
import { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { WalkThroughInput } from 'vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughInput';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { RawContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { Dimension } from 'vs/base/browser/dom';
import { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
import { CancellationToken } from 'vs/base/common/cancellation';
import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
import { IEditorOptions } from 'vs/platform/editor/common/editor';
export declare const WALK_THROUGH_FOCUS: RawContextKey<boolean>;
export declare class WalkThroughPart extends EditorPane {
    private readonly instantiationService;
    private readonly openerService;
    private readonly keybindingService;
    private readonly contextKeyService;
    private readonly configurationService;
    private readonly notificationService;
    private readonly extensionService;
    static readonly ID: string;
    private readonly disposables;
    private contentDisposables;
    private content;
    private scrollbar;
    private editorFocus;
    private lastFocus;
    private size;
    private editorMemento;
    constructor(telemetryService: ITelemetryService, themeService: IThemeService, textResourceConfigurationService: ITextResourceConfigurationService, instantiationService: IInstantiationService, openerService: IOpenerService, keybindingService: IKeybindingService, storageService: IStorageService, contextKeyService: IContextKeyService, configurationService: IConfigurationService, notificationService: INotificationService, extensionService: IExtensionService, editorGroupService: IEditorGroupsService);
    createEditor(container: HTMLElement): void;
    private updatedScrollPosition;
    private onTouchChange;
    private addEventListener;
    private registerFocusHandlers;
    private registerClickHandler;
    private open;
    private addFrom;
    layout(dimension: Dimension): void;
    private updateSizeClasses;
    focus(): void;
    arrowUp(): void;
    arrowDown(): void;
    private getArrowScrollHeight;
    pageUp(): void;
    pageDown(): void;
    setInput(input: WalkThroughInput, options: IEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    private getEditorOptions;
    private expandMacros;
    private decorateContent;
    private multiCursorModifier;
    private saveTextEditorViewState;
    private loadTextEditorViewState;
    clearInput(): void;
    protected saveState(): void;
    dispose(): void;
}

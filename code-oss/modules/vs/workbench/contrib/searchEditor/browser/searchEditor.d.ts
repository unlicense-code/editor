import * as DOM from 'vs/base/browser/dom';
import { CancellationToken } from 'vs/base/common/cancellation';
import { URI } from 'vs/base/common/uri';
import 'vs/css!./media/searchEditor';
import { ICodeEditorWidgetOptions } from 'vs/editor/browser/widget/codeEditorWidget';
import { ICodeEditorViewState } from 'vs/editor/common/editorCommon';
import { IModelService } from 'vs/editor/common/services/model';
import { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ILabelService } from 'vs/platform/label/common/label';
import { IEditorProgressService } from 'vs/platform/progress/common/progress';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { AbstractTextCodeEditor } from 'vs/workbench/browser/parts/editor/textCodeEditor';
import { IEditorOpenContext } from 'vs/workbench/common/editor';
import { EditorInput } from 'vs/workbench/common/editor/editorInput';
import type { SearchConfiguration, SearchEditorInput } from 'vs/workbench/contrib/searchEditor/browser/searchEditorInput';
import { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IFileService } from 'vs/platform/files/common/files';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { IEditorOptions } from 'vs/platform/editor/common/editor';
declare type SearchEditorViewState = ICodeEditorViewState & {
    focused: 'input' | 'editor';
};
export declare class SearchEditor extends AbstractTextCodeEditor<SearchEditorViewState> {
    private readonly modelService;
    private readonly contextService;
    private readonly labelService;
    private readonly contextViewService;
    private readonly commandService;
    readonly contextKeyService: IContextKeyService;
    readonly openerService: IOpenerService;
    private readonly notificationService;
    readonly progressService: IEditorProgressService;
    protected configurationService: IConfigurationService;
    static readonly ID: string;
    static readonly SEARCH_EDITOR_VIEW_STATE_PREFERENCE_KEY = "searchEditorViewState";
    private queryEditorWidget;
    private get searchResultEditor();
    private queryEditorContainer;
    private dimension?;
    private inputPatternIncludes;
    private inputPatternExcludes;
    private includesExcludesContainer;
    private toggleQueryDetailsButton;
    private messageBox;
    private runSearchDelayer;
    private pauseSearching;
    private showingIncludesExcludes;
    private searchOperation;
    private searchHistoryDelayer;
    private messageDisposables;
    private container;
    private searchModel;
    private ongoingOperations;
    private updatingModelForSearch;
    constructor(telemetryService: ITelemetryService, themeService: IThemeService, storageService: IStorageService, modelService: IModelService, contextService: IWorkspaceContextService, labelService: ILabelService, instantiationService: IInstantiationService, contextViewService: IContextViewService, commandService: ICommandService, contextKeyService: IContextKeyService, openerService: IOpenerService, notificationService: INotificationService, progressService: IEditorProgressService, textResourceService: ITextResourceConfigurationService, editorGroupService: IEditorGroupsService, editorService: IEditorService, configurationService: IConfigurationService, fileService: IFileService);
    protected createEditor(parent: HTMLElement): void;
    private createQueryEditor;
    private toggleRunAgainMessage;
    private _getContributions;
    protected getCodeEditorWidgetOptions(): ICodeEditorWidgetOptions;
    private registerEditorListeners;
    getControl(): import("../../../../editor/browser/editorBrowser").ICodeEditor;
    focus(): void;
    focusSearchInput(): void;
    focusFilesToIncludeInput(): void;
    focusFilesToExcludeInput(): void;
    focusNextInput(): void;
    focusPrevInput(): void;
    setQuery(query: string): void;
    selectQuery(): void;
    toggleWholeWords(): void;
    toggleRegex(): void;
    toggleCaseSensitive(): void;
    toggleContextLines(): void;
    modifyContextLines(increase: boolean): void;
    toggleQueryDetails(): void;
    deleteResultBlock(): void;
    cleanState(): void;
    private get searchConfig();
    private iterateThroughMatches;
    focusNextResult(): void;
    focusPreviousResult(): void;
    focusAllResults(): void;
    triggerSearch(_options?: {
        resetCursor?: boolean;
        delay?: number;
        focusResults?: boolean;
    }): Promise<void>;
    private readConfigFromWidget;
    private doRunSearch;
    private onSearchComplete;
    private addMessage;
    private retrieveFileStats;
    layout(dimension: DOM.Dimension): void;
    getSelected(): string;
    private reLayout;
    private getInput;
    private priorConfig;
    setSearchConfig(config: Partial<Readonly<SearchConfiguration>>): void;
    setInput(newInput: SearchEditorInput, options: IEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    private toggleIncludesExcludes;
    protected toEditorViewStateResource(input: EditorInput): URI | undefined;
    protected computeEditorViewState(resource: URI): SearchEditorViewState | undefined;
    protected tracksEditorViewState(input: EditorInput): boolean;
    private restoreViewState;
    getAriaLabel(): string;
}
export {};

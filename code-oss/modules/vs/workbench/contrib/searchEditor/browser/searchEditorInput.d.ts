import 'vs/css!./media/searchEditor';
import { Event } from 'vs/base/common/event';
import { URI } from 'vs/base/common/uri';
import { Range } from 'vs/editor/common/core/range';
import { IModelService } from 'vs/editor/common/services/model';
import { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';
import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { GroupIdentifier, IRevertOptions, IMoveResult, EditorInputCapabilities, IUntypedEditorInput } from 'vs/workbench/common/editor';
import { SearchEditorModel } from 'vs/workbench/contrib/searchEditor/browser/searchEditorModel';
import { IPathService } from 'vs/workbench/services/path/common/pathService';
import { ITextFileSaveOptions, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';
import { IWorkingCopySaveEvent } from 'vs/workbench/services/workingCopy/common/workingCopy';
import { ISearchComplete } from 'vs/workbench/services/search/common/search';
import { EditorInput } from 'vs/workbench/common/editor/editorInput';
import { IResourceEditorInput } from 'vs/platform/editor/common/editor';
export declare type SearchConfiguration = {
    query: string;
    filesToInclude: string;
    filesToExclude: string;
    contextLines: number;
    matchWholeWord: boolean;
    isCaseSensitive: boolean;
    isRegexp: boolean;
    useExcludeSettingsAndIgnoreFiles: boolean;
    showIncludesExcludes: boolean;
    onlyOpenEditors: boolean;
};
export declare const SEARCH_EDITOR_EXT = ".code-search";
export declare class SearchEditorInput extends EditorInput {
    readonly modelUri: URI;
    readonly backingUri: URI | undefined;
    private readonly modelService;
    protected readonly textFileService: ITextFileService;
    private readonly fileDialogService;
    private readonly instantiationService;
    private readonly workingCopyService;
    private readonly telemetryService;
    private readonly pathService;
    static readonly ID: string;
    get typeId(): string;
    get editorId(): string | undefined;
    get capabilities(): EditorInputCapabilities;
    private memento;
    private dirty;
    private lastLabel;
    private readonly _onDidChangeContent;
    readonly onDidChangeContent: Event<void>;
    private readonly _onDidSave;
    readonly onDidSave: Event<IWorkingCopySaveEvent>;
    private oldDecorationsIDs;
    get resource(): URI;
    ongoingSearchOperation: Promise<ISearchComplete> | undefined;
    model: SearchEditorModel;
    private _cachedResultsModel;
    private _cachedConfigurationModel;
    constructor(modelUri: URI, backingUri: URI | undefined, modelService: IModelService, textFileService: ITextFileService, fileDialogService: IFileDialogService, instantiationService: IInstantiationService, workingCopyService: IWorkingCopyService, telemetryService: ITelemetryService, pathService: IPathService, storageService: IStorageService);
    save(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<EditorInput | undefined>;
    tryReadConfigSync(): SearchConfiguration | undefined;
    private serializeForDisk;
    private configChangeListenerDisposable;
    private registerConfigChangeListeners;
    resolveModels(): Promise<import("vs/workbench/contrib/searchEditor/browser/searchEditorModel").SearchEditorData>;
    saveAs(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<EditorInput | undefined>;
    getName(maxLength?: number): string;
    setDirty(dirty: boolean): void;
    isDirty(): boolean;
    rename(group: GroupIdentifier, target: URI): Promise<IMoveResult | undefined>;
    dispose(): void;
    matches(other: EditorInput | IUntypedEditorInput): boolean;
    getMatchRanges(): Range[];
    setMatchRanges(ranges: Range[]): Promise<void>;
    revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void>;
    private backup;
    private suggestFileName;
    toUntyped(): IResourceEditorInput | undefined;
}
export declare const getOrMakeSearchEditorInput: (accessor: ServicesAccessor, existingData: ({
    from: 'model';
    config?: Partial<SearchConfiguration>;
    modelUri: URI;
    backupOf?: URI;
} | {
    from: 'rawData';
    resultsContents: string | undefined;
    config: Partial<SearchConfiguration>;
} | {
    from: 'existingFile';
    fileUri: URI;
})) => SearchEditorInput;

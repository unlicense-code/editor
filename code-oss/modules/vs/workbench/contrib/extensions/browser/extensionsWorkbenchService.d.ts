import { Event } from 'vs/base/common/event';
import { Disposable } from 'vs/base/common/lifecycle';
import { IPager } from 'vs/base/common/paging';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IExtensionGalleryService, ILocalExtension, IGalleryExtension, IQueryOptions, InstallOptions, InstallVSIXOptions, IExtensionInfo, IExtensionQueryOptions, IDeprecationInfo } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IWorkbenchExtensionEnablementService, EnablementState, IExtensionManagementServerService, IExtensionManagementServer, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IHostService } from 'vs/workbench/services/host/browser/host';
import { URI } from 'vs/base/common/uri';
import { IExtension, ExtensionState, IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IURLService, IURLHandler, IOpenURLOptions } from 'vs/platform/url/common/url';
import { IExtensionEditorOptions } from 'vs/workbench/contrib/extensions/common/extensionsInput';
import { ILogService } from 'vs/platform/log/common/log';
import { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { CancellationToken } from 'vs/base/common/cancellation';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IFileService } from 'vs/platform/files/common/files';
import { IExtensionManifest, ExtensionType, IExtensionIdentifier } from 'vs/platform/extensions/common/extensions';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { IProductService } from 'vs/platform/product/common/productService';
import { IIgnoredExtensionsManagementService } from 'vs/platform/userDataSync/common/ignoredExtensions';
import { IUserDataAutoSyncService } from 'vs/platform/userDataSync/common/userDataSync';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';
import { IExtensionService, IExtensionsStatus } from 'vs/workbench/services/extensions/common/extensions';
import { ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';
import { ILocaleService } from 'vs/workbench/contrib/localization/common/locale';
interface IExtensionStateProvider<T> {
    (extension: Extension): T;
}
export declare class Extension implements IExtension {
    private stateProvider;
    private runtimeStateProvider;
    readonly server: IExtensionManagementServer | undefined;
    local: ILocalExtension | undefined;
    gallery: IGalleryExtension | undefined;
    private readonly galleryService;
    private readonly telemetryService;
    private readonly logService;
    private readonly fileService;
    private readonly productService;
    enablementState: EnablementState;
    constructor(stateProvider: IExtensionStateProvider<ExtensionState>, runtimeStateProvider: IExtensionStateProvider<string | undefined>, server: IExtensionManagementServer | undefined, local: ILocalExtension | undefined, gallery: IGalleryExtension | undefined, galleryService: IExtensionGalleryService, telemetryService: ITelemetryService, logService: ILogService, fileService: IFileService, productService: IProductService);
    get type(): ExtensionType;
    get isBuiltin(): boolean;
    get name(): string;
    get displayName(): string;
    get identifier(): IExtensionIdentifier;
    get uuid(): string | undefined;
    get publisher(): string;
    get publisherDisplayName(): string;
    get publisherUrl(): URI | undefined;
    get publisherDomain(): {
        link: string;
        verified: boolean;
    } | undefined;
    get publisherSponsorLink(): URI | undefined;
    get version(): string;
    get latestVersion(): string;
    get description(): string;
    get url(): string | undefined;
    get iconUrl(): string;
    get iconUrlFallback(): string;
    private get localIconUrl();
    private get galleryIconUrl();
    private get galleryIconUrlFallback();
    private get defaultIconUrl();
    get repository(): string | undefined;
    get licenseUrl(): string | undefined;
    get state(): ExtensionState;
    isMalicious: boolean;
    deprecationInfo: IDeprecationInfo | undefined;
    get installCount(): number | undefined;
    get rating(): number | undefined;
    get ratingCount(): number | undefined;
    get outdated(): boolean;
    get outdatedTargetPlatform(): boolean;
    get reloadRequiredStatus(): string | undefined;
    get telemetryData(): any;
    get preview(): boolean;
    get hasPreReleaseVersion(): boolean;
    get hasReleaseVersion(): boolean;
    private getLocal;
    getManifest(token: CancellationToken): Promise<IExtensionManifest | null>;
    hasReadme(): boolean;
    getReadme(token: CancellationToken): Promise<string>;
    hasChangelog(): boolean;
    getChangelog(token: CancellationToken): Promise<string>;
    get categories(): readonly string[];
    get tags(): readonly string[];
    get dependencies(): string[];
    get extensionPack(): string[];
}
export declare class ExtensionsWorkbenchService extends Disposable implements IExtensionsWorkbenchService, IURLHandler {
    private readonly instantiationService;
    private readonly editorService;
    private readonly extensionManagementService;
    private readonly galleryService;
    private readonly configurationService;
    private readonly telemetryService;
    private readonly notificationService;
    private readonly extensionEnablementService;
    private readonly hostService;
    private readonly progressService;
    private readonly extensionManagementServerService;
    private readonly storageService;
    private readonly languageService;
    private readonly extensionsSyncManagementService;
    private readonly userDataAutoSyncService;
    private readonly productService;
    private readonly extensionManifestPropertiesService;
    private readonly logService;
    private readonly extensionService;
    private readonly languagePackService;
    private readonly localeService;
    private static readonly UpdatesCheckInterval;
    readonly _serviceBrand: undefined;
    private hasOutdatedExtensionsContextKey;
    private readonly localExtensions;
    private readonly remoteExtensions;
    private readonly webExtensions;
    private updatesCheckDelayer;
    private autoUpdateDelayer;
    private readonly _onChange;
    get onChange(): Event<IExtension | undefined>;
    private readonly _onReset;
    get onReset(): Event<void>;
    readonly preferPreReleases: boolean;
    private installing;
    constructor(instantiationService: IInstantiationService, editorService: IEditorService, extensionManagementService: IWorkbenchExtensionManagementService, galleryService: IExtensionGalleryService, configurationService: IConfigurationService, telemetryService: ITelemetryService, notificationService: INotificationService, urlService: IURLService, extensionEnablementService: IWorkbenchExtensionEnablementService, hostService: IHostService, progressService: IProgressService, extensionManagementServerService: IExtensionManagementServerService, storageService: IStorageService, languageService: ILanguageService, extensionsSyncManagementService: IIgnoredExtensionsManagementService, userDataAutoSyncService: IUserDataAutoSyncService, productService: IProductService, contextKeyService: IContextKeyService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, logService: ILogService, extensionService: IExtensionService, languagePackService: ILanguagePackService, localeService: ILocaleService);
    private _reportTelemetry;
    private onDidChangeRunningExtensions;
    get local(): IExtension[];
    get installed(): IExtension[];
    get outdated(): IExtension[];
    queryLocal(server?: IExtensionManagementServer): Promise<IExtension[]>;
    queryGallery(token: CancellationToken): Promise<IPager<IExtension>>;
    queryGallery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IExtension>>;
    getExtensions(extensionInfos: IExtensionInfo[], token: CancellationToken): Promise<IExtension[]>;
    getExtensions(extensionInfos: IExtensionInfo[], options: IExtensionQueryOptions, token: CancellationToken): Promise<IExtension[]>;
    private resolveQueryText;
    private fromGallery;
    private getInstalledExtensionMatchingGallery;
    open(extension: IExtension, options?: IExtensionEditorOptions): Promise<void>;
    getExtensionStatus(extension: IExtension): IExtensionsStatus | undefined;
    private getReloadStatus;
    private getPrimaryExtension;
    private getExtensionState;
    checkForUpdates(onlyBuiltin?: boolean): Promise<void>;
    private syncInstalledExtensionsWithGallery;
    private getAutoUpdateValue;
    private isAutoUpdateEnabled;
    private isAutoCheckUpdatesEnabled;
    private eventuallyCheckForUpdates;
    private eventuallyAutoUpdateExtensions;
    private autoUpdateBuiltinExtensions;
    private autoUpdateExtensions;
    canInstall(extension: IExtension): Promise<boolean>;
    install(extension: URI | IExtension, installOptions?: InstallOptions | InstallVSIXOptions, progressLocation?: ProgressLocation): Promise<IExtension>;
    canSetLanguage(extension: IExtension): boolean;
    setLanguage(extension: IExtension): Promise<void>;
    setEnablement(extensions: IExtension | IExtension[], enablementState: EnablementState): Promise<void>;
    uninstall(extension: IExtension): Promise<void>;
    installVersion(extension: IExtension, version: string, installOptions?: InstallOptions): Promise<IExtension>;
    reinstall(extension: IExtension): Promise<IExtension>;
    isExtensionIgnoredToSync(extension: IExtension): boolean;
    toggleExtensionIgnoredToSync(extension: IExtension): Promise<void>;
    private isInstalledExtensionSynced;
    updateSynchronizingInstalledExtension(extension: ILocalExtension, sync: boolean): Promise<ILocalExtension>;
    private installWithProgress;
    private installFromVSIX;
    private installFromGallery;
    private waitAndGetInstalledExtension;
    private promptAndSetEnablement;
    private checkAndSetEnablement;
    private getExtensionsRecursively;
    private getDependentsAfterDisablement;
    private getDependentsErrorMessage;
    private getErrorMessageForDisablingAnExtensionWithDependents;
    private doSetEnablement;
    private updateContexts;
    private _activityCallBack;
    private updateActivity;
    private onError;
    handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean>;
    private onOpenExtensionUrl;
    private _ignoredAutoUpdateExtensions;
    private get ignoredAutoUpdateExtensions();
    private set ignoredAutoUpdateExtensions(value);
    private onDidChangeStorage;
    private ignoreAutoUpdate;
    setExtensionIgnoresUpdate(extension: IExtension, ignoreAutoUpate: boolean): void;
    isExtensionIgnoresUpdates(extension: IExtension): boolean;
    private isAutoUpdateIgnored;
    private resetIgnoreAutoUpdateExtensions;
}
export {};

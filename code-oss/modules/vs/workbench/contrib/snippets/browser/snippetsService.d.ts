import { Position } from 'vs/editor/common/core/position';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IFileService } from 'vs/platform/files/common/files';
import { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';
import { ILogService } from 'vs/platform/log/common/log';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ISnippetGetOptions, ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets';
import { Snippet, SnippetFile } from 'vs/workbench/contrib/snippets/browser/snippetsFile';
import { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';
import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
export declare class SnippetsService implements ISnippetsService {
    private readonly _environmentService;
    private readonly _userDataProfileService;
    private readonly _contextService;
    private readonly _languageService;
    private readonly _logService;
    private readonly _fileService;
    private readonly _textfileService;
    private readonly _extensionResourceLoaderService;
    readonly _serviceBrand: undefined;
    private readonly _disposables;
    private readonly _pendingWork;
    private readonly _files;
    private readonly _enablement;
    private readonly _usageTimestamps;
    constructor(_environmentService: IEnvironmentService, _userDataProfileService: IUserDataProfileService, _contextService: IWorkspaceContextService, _languageService: ILanguageService, _logService: ILogService, _fileService: IFileService, _textfileService: ITextFileService, _extensionResourceLoaderService: IExtensionResourceLoaderService, lifecycleService: ILifecycleService, instantiationService: IInstantiationService, languageConfigurationService: ILanguageConfigurationService);
    dispose(): void;
    isEnabled(snippet: Snippet): boolean;
    updateEnablement(snippet: Snippet, enabled: boolean): void;
    updateUsageTimestamp(snippet: Snippet): void;
    private _joinSnippets;
    getSnippetFiles(): Promise<Iterable<SnippetFile>>;
    getSnippets(languageId: string | undefined, opts?: ISnippetGetOptions): Promise<Snippet[]>;
    getSnippetsSync(languageId: string, opts?: ISnippetGetOptions): Snippet[];
    private _filterAndSortSnippets;
    private _compareSnippet;
    private _initExtensionSnippets;
    private _initWorkspaceSnippets;
    private _initWorkspaceFolderSnippets;
    private _initUserSnippets;
    private _initFolderSnippets;
    private _addSnippetFile;
}
export interface ISimpleModel {
    getLineContent(lineNumber: number): string;
}
export declare function getNonWhitespacePrefix(model: ISimpleModel, position: Position): string;

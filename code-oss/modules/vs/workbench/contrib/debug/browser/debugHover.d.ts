import { ContentWidgetPositionPreference, ICodeEditor, IContentWidget, IContentWidgetPosition } from 'vs/editor/browser/editorBrowser';
import { Position } from 'vs/editor/common/core/position';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IDebugService, IExpression, IStackFrame } from 'vs/workbench/contrib/debug/common/debug';
export declare function findExpressionInStackFrame(stackFrame: IStackFrame, namesToFind: string[]): Promise<IExpression | undefined>;
export declare class DebugHoverWidget implements IContentWidget {
    private editor;
    private readonly debugService;
    private readonly instantiationService;
    private readonly themeService;
    static readonly ID = "debug.hoverWidget";
    readonly allowEditorOverflow = true;
    private _isVisible;
    private showCancellationSource?;
    private domNode;
    private tree;
    private showAtPosition;
    private positionPreference;
    private readonly highlightDecorations;
    private complexValueContainer;
    private complexValueTitle;
    private valueContainer;
    private treeContainer;
    private toDispose;
    private scrollbar;
    private debugHoverComputer;
    constructor(editor: ICodeEditor, debugService: IDebugService, instantiationService: IInstantiationService, themeService: IThemeService);
    private create;
    private registerListeners;
    isHovered(): boolean;
    isVisible(): boolean;
    willBeVisible(): boolean;
    getId(): string;
    getDomNode(): HTMLElement;
    showAt(position: Position, focus: boolean): Promise<void>;
    private static readonly _HOVER_HIGHLIGHT_DECORATION_OPTIONS;
    private doShow;
    private layoutTreeAndContainer;
    afterRender(positionPreference: ContentWidgetPositionPreference | null): void;
    hide(): void;
    getPosition(): IContentWidgetPosition | null;
    dispose(): void;
}

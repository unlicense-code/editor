import { IHistoryNavigationWidget } from 'vs/base/browser/history';
import { IActionViewItem } from 'vs/base/browser/ui/actionbar/actionbar';
import { IAction } from 'vs/base/common/actions';
import 'vs/css!./media/repl';
import { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';
import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';
import { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';
import { IModelService } from 'vs/editor/common/services/model';
import { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfiguration';
import { IMenuService } from 'vs/platform/actions/common/actions';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ILogService } from 'vs/platform/log/common/log';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { FilterViewPane, IViewPaneOptions } from 'vs/workbench/browser/parts/views/viewPane';
import { IViewDescriptorService } from 'vs/workbench/common/views';
import { IDebugService, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
export declare class Repl extends FilterViewPane implements IHistoryNavigationWidget {
    private readonly debugService;
    private readonly storageService;
    private readonly modelService;
    private readonly textResourcePropertiesService;
    private readonly editorService;
    private readonly languageFeaturesService;
    private readonly logService;
    readonly _serviceBrand: undefined;
    private static readonly REFRESH_DELAY;
    private static readonly URI;
    private history;
    private tree;
    private replOptions;
    private previousTreeScrollHeight;
    private replDelegate;
    private container;
    private treeContainer;
    private replInput;
    private replInputContainer;
    private bodyContentDimension;
    private replInputLineCount;
    private model;
    private setHistoryNavigationEnablement;
    private scopedInstantiationService;
    private replElementsChangeListener;
    private styleElement;
    private completionItemProvider;
    private modelChangeListener;
    private filter;
    private multiSessionRepl;
    private menu;
    constructor(options: IViewPaneOptions, debugService: IDebugService, instantiationService: IInstantiationService, storageService: IStorageService, themeService: IThemeService, modelService: IModelService, contextKeyService: IContextKeyService, codeEditorService: ICodeEditorService, viewDescriptorService: IViewDescriptorService, contextMenuService: IContextMenuService, configurationService: IConfigurationService, textResourcePropertiesService: ITextResourcePropertiesService, editorService: IEditorService, keybindingService: IKeybindingService, openerService: IOpenerService, telemetryService: ITelemetryService, menuService: IMenuService, languageFeaturesService: ILanguageFeaturesService, logService: ILogService);
    private registerListeners;
    private onDidFocusSession;
    getFilterStats(): {
        total: number;
        filtered: number;
    };
    get isReadonly(): boolean;
    showPreviousValue(): void;
    showNextValue(): void;
    focusFilter(): void;
    private setMode;
    private onDidStyleChange;
    private navigateHistory;
    selectSession(session?: IDebugSession): Promise<void>;
    clearRepl(): Promise<void>;
    acceptReplInput(): void;
    getVisibleContent(): string;
    protected layoutBodyContent(height: number, width: number): void;
    shouldShowFilterInHeader(): boolean;
    collapseAll(): void;
    getReplInput(): CodeEditorWidget;
    focus(): void;
    getActionViewItem(action: IAction): IActionViewItem | undefined;
    private get isMultiSessionView();
    private get refreshScheduler();
    protected renderBody(parent: HTMLElement): void;
    private createReplTree;
    private createReplInput;
    private onContextMenu;
    private refreshReplElements;
    private updateInputDecoration;
    saveState(): void;
    dispose(): void;
}

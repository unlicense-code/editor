import 'vs/css!./media/markers';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { Marker, ResourceMarkers, MarkerElement, MarkerTableItem } from 'vs/workbench/contrib/markers/browser/markersModel';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { MarkersFilters } from 'vs/workbench/contrib/markers/browser/markersViewActions';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ITreeContextMenuEvent, ITreeEvent } from 'vs/base/browser/ui/tree/tree';
import { Event } from 'vs/base/common/event';
import { IOpenEvent } from 'vs/platform/list/browser/listService';
import { FilterOptions } from 'vs/workbench/contrib/markers/browser/markersFilterOptions';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { IViewPaneOptions, FilterViewPane } from 'vs/workbench/browser/parts/views/viewPane';
import { IViewDescriptorService } from 'vs/workbench/common/views';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';
import { IMarkersView } from 'vs/workbench/contrib/markers/browser/markers';
import { ITableContextMenuEvent, ITableEvent } from 'vs/base/browser/ui/table/table';
import { MarkersViewMode } from 'vs/workbench/contrib/markers/common/markers';
export interface IProblemsWidget {
    get contextKeyService(): IContextKeyService;
    get onContextMenu(): Event<ITreeContextMenuEvent<MarkerElement | null>> | Event<ITableContextMenuEvent<MarkerTableItem>>;
    get onDidChangeFocus(): Event<ITreeEvent<MarkerElement | null>> | Event<ITableEvent<MarkerTableItem>>;
    get onDidChangeSelection(): Event<ITreeEvent<MarkerElement | null>> | Event<ITableEvent<MarkerTableItem>>;
    get onDidOpen(): Event<IOpenEvent<MarkerElement | MarkerTableItem | undefined>>;
    collapseMarkers(): void;
    dispose(): void;
    domFocus(): void;
    filterMarkers(resourceMarkers: ResourceMarkers[], filterOptions: FilterOptions): void;
    getFocus(): (MarkerElement | MarkerTableItem | null)[];
    getHTMLElement(): HTMLElement;
    getRelativeTop(location: MarkerElement | MarkerTableItem | null): number | null;
    getSelection(): (MarkerElement | MarkerTableItem | null)[];
    getVisibleItemCount(): number;
    layout(height: number, width: number): void;
    reset(resourceMarkers: ResourceMarkers[]): void;
    revealMarkers(activeResource: ResourceMarkers | null, focus: boolean, lastSelectedRelativeTop: number): void;
    setAriaLabel(label: string): void;
    setMarkerSelection(selection?: Marker[], focus?: Marker[]): void;
    toggleVisibility(hide: boolean): void;
    update(resourceMarkers: ResourceMarkers[]): void;
    updateMarker(marker: Marker): void;
}
export declare class MarkersView extends FilterViewPane implements IMarkersView {
    private readonly editorService;
    private readonly markerService;
    private readonly workspaceContextService;
    private readonly uriIdentityService;
    private lastSelectedRelativeTop;
    private currentActiveResource;
    private readonly rangeHighlightDecorations;
    private readonly markersModel;
    private readonly filter;
    private readonly onVisibleDisposables;
    private widget;
    private widgetDisposables;
    private widgetContainer;
    private widgetIdentityProvider;
    private widgetAccessibilityProvider;
    private messageBoxContainer;
    private ariaLabelElement;
    readonly filters: MarkersFilters;
    private currentHeight;
    private currentWidth;
    private readonly panelState;
    private cachedFilterStats;
    private currentResourceGotAddedToMarkersData;
    private readonly markersViewModel;
    readonly onDidChangeVisibility: Event<boolean>;
    constructor(options: IViewPaneOptions, instantiationService: IInstantiationService, viewDescriptorService: IViewDescriptorService, editorService: IEditorService, configurationService: IConfigurationService, telemetryService: ITelemetryService, markerService: IMarkerService, contextKeyService: IContextKeyService, workspaceContextService: IWorkspaceContextService, contextMenuService: IContextMenuService, uriIdentityService: IUriIdentityService, keybindingService: IKeybindingService, storageService: IStorageService, openerService: IOpenerService, themeService: IThemeService);
    renderBody(parent: HTMLElement): void;
    getTitle(): string;
    layoutBodyContent(height?: number, width?: number): void;
    focus(): void;
    focusFilter(): void;
    updateBadge(total: number, filtered: number): void;
    checkMoreFilters(): void;
    clearFilterText(): void;
    showQuickFixes(marker: Marker): void;
    openFileAtElement(element: any, preserveFocus: boolean, sideByside: boolean, pinned: boolean): boolean;
    private refreshPanel;
    private onDidChangeViewState;
    private resetWidget;
    private updateFilter;
    private getDefaultViewMode;
    private getFilesExcludeExpressions;
    private getFilesExclude;
    private getResourceMarkers;
    private createMessageBox;
    private createArialLabelElement;
    private createWidget;
    private createTable;
    private createTree;
    collapseAll(): void;
    setMultiline(multiline: boolean): void;
    setViewMode(viewMode: MarkersViewMode): void;
    private onDidChangeMarkersViewVisibility;
    private reInitialize;
    private onDidChangeModel;
    private onDidChangeViewMode;
    private isCurrentResourceGotAddedToMarkersData;
    private onActiveEditorChanged;
    private setCurrentActiveEditor;
    private onSelected;
    private hasNoProblems;
    private renderContent;
    private renderMessage;
    private renderFilterMessageForActiveFile;
    private renderFilteredByFilterMessage;
    private renderNoProblemsMessageForActiveFile;
    private renderNoProblemsMessage;
    private setAriaLabel;
    private clearFilters;
    private autoReveal;
    private getResourceForCurrentActiveResource;
    private updateRangeHighlights;
    private highlightCurrentSelectedMarkerRange;
    private onContextMenu;
    private getMenuActions;
    getFocusElement(): MarkerElement | undefined;
    getFocusedSelectedElements(): MarkerElement[] | null;
    getAllResourceMarkers(): ResourceMarkers[];
    getFilterStats(): {
        total: number;
        filtered: number;
    };
    private toggleVisibility;
    saveState(): void;
    dispose(): void;
}

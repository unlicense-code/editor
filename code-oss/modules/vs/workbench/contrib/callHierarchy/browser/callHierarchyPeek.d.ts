import 'vs/css!./media/callHierarchy';
import * as peekView from 'vs/editor/contrib/peekView/browser/peekView';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { CallHierarchyDirection, CallHierarchyModel } from 'vs/workbench/contrib/callHierarchy/common/callHierarchy';
import * as callHTree from 'vs/workbench/contrib/callHierarchy/browser/callHierarchyTree';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { ITextModelService } from 'vs/editor/common/services/resolverService';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IPosition } from 'vs/editor/common/core/position';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { MenuId, IMenuService } from 'vs/platform/actions/common/actions';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
export declare class CallHierarchyTreePeekWidget extends peekView.PeekViewWidget {
    private readonly _where;
    private _direction;
    private readonly _peekViewService;
    private readonly _editorService;
    private readonly _textModelService;
    private readonly _storageService;
    private readonly _menuService;
    private readonly _contextKeyService;
    private readonly _instantiationService;
    static readonly TitleMenu: MenuId;
    private _parent;
    private _message;
    private _splitView;
    private _tree;
    private _treeViewStates;
    private _editor;
    private _dim;
    private _layoutInfo;
    private readonly _previewDisposable;
    constructor(editor: ICodeEditor, _where: IPosition, _direction: CallHierarchyDirection, themeService: IThemeService, _peekViewService: peekView.IPeekViewService, _editorService: IEditorService, _textModelService: ITextModelService, _storageService: IStorageService, _menuService: IMenuService, _contextKeyService: IContextKeyService, _instantiationService: IInstantiationService);
    dispose(): void;
    get direction(): CallHierarchyDirection;
    private _applyTheme;
    protected _fillHead(container: HTMLElement): void;
    protected _fillBody(parent: HTMLElement): void;
    private _updatePreview;
    showLoading(): void;
    showMessage(message: string): void;
    showModel(model: CallHierarchyModel): Promise<void>;
    getModel(): CallHierarchyModel | undefined;
    getFocused(): callHTree.Call | undefined;
    updateDirection(newDirection: CallHierarchyDirection): Promise<void>;
    private _show;
    protected _onWidth(width: number): void;
    protected _doLayoutBody(height: number, width: number): void;
}

import 'vs/css!./media/keybindingsEditor';
import * as DOM from 'vs/base/browser/dom';
import { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';
import { IEditorOpenContext } from 'vs/workbench/common/editor';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IKeybindingEditingService } from 'vs/workbench/services/keybinding/common/keybindingEditing';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { CancellationToken } from 'vs/base/common/cancellation';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { Event } from 'vs/base/common/event';
import { IKeybindingItemEntry, IKeybindingsEditorPane } from 'vs/workbench/services/preferences/common/preferences';
import { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';
import { IEditorOptions } from 'vs/platform/editor/common/editor';
export declare class KeybindingsEditor extends EditorPane implements IKeybindingsEditorPane {
    private readonly keybindingsService;
    private readonly contextMenuService;
    private readonly keybindingEditingService;
    private readonly contextKeyService;
    private readonly notificationService;
    private readonly clipboardService;
    private readonly instantiationService;
    private readonly editorService;
    static readonly ID: string;
    private _onDefineWhenExpression;
    readonly onDefineWhenExpression: Event<IKeybindingItemEntry>;
    private _onLayout;
    readonly onLayout: Event<void>;
    private keybindingsEditorModel;
    private headerContainer;
    private actionsContainer;
    private searchWidget;
    private searchHistoryDelayer;
    private overlayContainer;
    private defineKeybindingWidget;
    private unAssignedKeybindingItemToRevealAndFocus;
    private tableEntries;
    private keybindingsTableContainer;
    private keybindingsTable;
    private dimension;
    private delayedFiltering;
    private latestEmptyFilters;
    private keybindingsEditorContextKey;
    private keybindingFocusContextKey;
    private searchFocusContextKey;
    private readonly sortByPrecedenceAction;
    private readonly recordKeysAction;
    private ariaLabelElement;
    constructor(telemetryService: ITelemetryService, themeService: IThemeService, keybindingsService: IKeybindingService, contextMenuService: IContextMenuService, keybindingEditingService: IKeybindingEditingService, contextKeyService: IContextKeyService, notificationService: INotificationService, clipboardService: IClipboardService, instantiationService: IInstantiationService, editorService: IEditorService, storageService: IStorageService);
    protected createEditor(parent: HTMLElement): void;
    setInput(input: KeybindingsEditorInput, options: IEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    clearInput(): void;
    layout(dimension: DOM.Dimension): void;
    focus(): void;
    get activeKeybindingEntry(): IKeybindingItemEntry | null;
    defineKeybinding(keybindingEntry: IKeybindingItemEntry, add: boolean): Promise<void>;
    defineWhenExpression(keybindingEntry: IKeybindingItemEntry): void;
    updateKeybinding(keybindingEntry: IKeybindingItemEntry, key: string, when: string | undefined, add?: boolean): Promise<void>;
    removeKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<void>;
    resetKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<void>;
    copyKeybinding(keybinding: IKeybindingItemEntry): Promise<void>;
    copyKeybindingCommand(keybinding: IKeybindingItemEntry): Promise<void>;
    copyKeybindingCommandTitle(keybinding: IKeybindingItemEntry): Promise<void>;
    focusSearch(): void;
    search(filter: string): void;
    clearSearchResults(): void;
    showSimilarKeybindings(keybindingEntry: IKeybindingItemEntry): void;
    private createAriaLabelElement;
    private createOverlayContainer;
    private showOverlayContainer;
    private hideOverlayContainer;
    private createHeader;
    private updateSearchOptions;
    private createRecordingBadge;
    private layoutSearchWidget;
    private createBody;
    private createTable;
    private render;
    private getActionsLabels;
    private filterKeybindings;
    clearKeyboardShortcutSearchHistory(): void;
    private renderKeybindingsEntries;
    private getAriaLabel;
    private layoutKeybindingsTable;
    private getIndexOf;
    private getNewIndexOfUnassignedKeybinding;
    private selectEntry;
    focusKeybindings(): void;
    selectKeybinding(keybindingItemEntry: IKeybindingItemEntry): void;
    recordSearchKeys(): void;
    toggleSortByPrecedence(): void;
    private onContextMenu;
    private onFocusChange;
    private createDefineKeybindingAction;
    private createAddKeybindingAction;
    private createDefineWhenExpressionAction;
    private createRemoveAction;
    private createResetAction;
    private createShowConflictsAction;
    private createCopyAction;
    private createCopyCommandAction;
    private createCopyCommandTitleAction;
    private onKeybindingEditingError;
}

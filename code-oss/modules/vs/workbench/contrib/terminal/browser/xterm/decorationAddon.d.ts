import { Disposable } from 'vs/base/common/lifecycle';
import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';
import { IMarkProperties, ITerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/capabilities';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { ITerminalCommand } from 'vs/workbench/contrib/terminal/common/terminal';
import { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';
import { IDecoration, ITerminalAddon, Terminal } from 'xterm';
export declare class DecorationAddon extends Disposable implements ITerminalAddon {
    private readonly _capabilities;
    private readonly _clipboardService;
    private readonly _contextMenuService;
    private readonly _configurationService;
    private readonly _themeService;
    private readonly _openerService;
    private readonly _quickInputService;
    protected _terminal: Terminal | undefined;
    private _capabilityDisposables;
    private _decorations;
    private _placeholderDecoration;
    private _showGutterDecorations?;
    private _showOverviewRulerDecorations?;
    private _terminalDecorationHoverService;
    private readonly _onDidRequestRunCommand;
    readonly onDidRequestRunCommand: import("vs/base/common/event").Event<{
        command: ITerminalCommand;
        copyAsHtml?: boolean | undefined;
    }>;
    constructor(_capabilities: ITerminalCapabilityStore, _clipboardService: IClipboardService, _contextMenuService: IContextMenuService, _configurationService: IConfigurationService, _themeService: IThemeService, _openerService: IOpenerService, _quickInputService: IQuickInputService, lifecycleService: ILifecycleService, instantiationService: IInstantiationService);
    private _removeCapabilityDisposables;
    private _createCapabilityDisposables;
    registerMarkDecoration(mark: IMarkProperties): IDecoration | undefined;
    private _updateDecorationVisibility;
    private _disposeAllDecorations;
    private _updateGutterDecorationVisibility;
    private _updateCommandDecorationVisibility;
    refreshLayouts(): void;
    private _refreshStyles;
    private _dispose;
    private _clearPlaceholder;
    clearDecorations(): void;
    private _attachToCommandCapability;
    private _getCommandDetectionListeners;
    activate(terminal: Terminal): void;
    registerCommandDecoration(command?: ITerminalCommand, beforeCommandExecution?: boolean, markProperties?: IMarkProperties): IDecoration | undefined;
    private _createDisposables;
    private _updateClasses;
    private _createContextMenu;
    private _getCommandActions;
    private _showConfigureCommandDecorationsQuickPick;
    private _showToggleVisibilityQuickPick;
}

import { Event } from 'vs/base/common/event';
import { IDisposable, Disposable } from 'vs/base/common/lifecycle';
import { Orientation } from 'vs/base/browser/ui/splitview/splitview';
import { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ITerminalInstance, Direction, ITerminalGroup, ITerminalService, ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';
import { IViewDescriptorService } from 'vs/workbench/common/views';
import { IShellLaunchConfig, ITerminalTabLayoutInfoById } from 'vs/platform/terminal/common/terminal';
export declare class TerminalGroup extends Disposable implements ITerminalGroup {
    private _container;
    private readonly _terminalService;
    private readonly _terminalInstanceService;
    private readonly _layoutService;
    private readonly _viewDescriptorService;
    private readonly _instantiationService;
    private _terminalInstances;
    private _splitPaneContainer;
    private _groupElement;
    private _panelPosition;
    private _terminalLocation;
    private _instanceDisposables;
    private _activeInstanceIndex;
    get terminalInstances(): ITerminalInstance[];
    private _initialRelativeSizes;
    private readonly _onDidDisposeInstance;
    readonly onDidDisposeInstance: Event<ITerminalInstance>;
    private readonly _onDidFocusInstance;
    readonly onDidFocusInstance: Event<ITerminalInstance>;
    private readonly _onDidChangeInstanceCapability;
    readonly onDidChangeInstanceCapability: Event<ITerminalInstance>;
    private readonly _onDisposed;
    readonly onDisposed: Event<ITerminalGroup>;
    private readonly _onInstancesChanged;
    readonly onInstancesChanged: Event<void>;
    private readonly _onDidChangeActiveInstance;
    readonly onDidChangeActiveInstance: Event<ITerminalInstance | undefined>;
    private readonly _onPanelOrientationChanged;
    readonly onPanelOrientationChanged: Event<Orientation>;
    constructor(_container: HTMLElement | undefined, shellLaunchConfigOrInstance: IShellLaunchConfig | ITerminalInstance | undefined, _terminalService: ITerminalService, _terminalInstanceService: ITerminalInstanceService, _layoutService: IWorkbenchLayoutService, _viewDescriptorService: IViewDescriptorService, _instantiationService: IInstantiationService);
    addInstance(shellLaunchConfigOrInstance: IShellLaunchConfig | ITerminalInstance, parentTerminalId?: number): void;
    dispose(): void;
    get activeInstance(): ITerminalInstance | undefined;
    getLayoutInfo(isActive: boolean): ITerminalTabLayoutInfoById;
    private _initInstanceListeners;
    private _handleOnDidDisposeInstance;
    removeInstance(instance: ITerminalInstance): void;
    private _removeInstance;
    moveInstance(instance: ITerminalInstance, index: number): void;
    private _setActiveInstance;
    private _getIndexFromId;
    setActiveInstanceByIndex(index: number, force?: boolean): void;
    attachToElement(element: HTMLElement): void;
    get title(): string;
    private _getBellTitle;
    setVisible(visible: boolean): void;
    split(shellLaunchConfig: IShellLaunchConfig): ITerminalInstance;
    addDisposable(disposable: IDisposable): void;
    layout(width: number, height: number): void;
    focusPreviousPane(): void;
    focusNextPane(): void;
    resizePane(direction: Direction): void;
    resizePanes(relativeSizes: number[]): void;
}

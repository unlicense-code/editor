import { Event } from 'vs/base/common/event';
import { IDisposable } from 'vs/base/common/lifecycle';
import { URI } from 'vs/base/common/uri';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ILogService } from 'vs/platform/log/common/log';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { ICreateContributedTerminalProfileOptions, ITerminalLaunchError, TerminalLocation } from 'vs/platform/terminal/common/terminal';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IEditableData, IViewsService } from 'vs/workbench/common/views';
import { ICreateTerminalOptions, ITerminalEditorService, ITerminalExternalLinkProvider, ITerminalGroup, ITerminalGroupService, ITerminalInstance, ITerminalInstanceHost, ITerminalInstanceService, ITerminalLocationOptions, ITerminalService, ITerminalServiceNativeDelegate, TerminalConnectionState } from 'vs/workbench/contrib/terminal/browser/terminal';
import { IRemoteTerminalAttachTarget, IStartExtensionTerminalRequest, ITerminalBackend, ITerminalConfigHelper, ITerminalProcessExtHostProxy, ITerminalProfileService } from 'vs/workbench/contrib/terminal/common/terminal';
import { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
import { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';
import { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';
export declare class TerminalService implements ITerminalService {
    private _contextKeyService;
    private readonly _lifecycleService;
    private readonly _logService;
    private _dialogService;
    private _instantiationService;
    private _remoteAgentService;
    private _viewsService;
    private readonly _configurationService;
    private readonly _environmentService;
    private readonly _terminalEditorService;
    private readonly _terminalGroupService;
    private readonly _terminalInstanceService;
    private readonly _editorGroupsService;
    private readonly _terminalProfileService;
    private readonly _extensionService;
    private readonly _notificationService;
    private readonly _workspaceContextService;
    private readonly _commandService;
    _serviceBrand: undefined;
    private _hostActiveTerminals;
    private _terminalEditorActive;
    private readonly _terminalShellTypeContextKey;
    private _escapeSequenceLoggingEnabled;
    private _isShuttingDown;
    private _backgroundedTerminalInstances;
    private _backgroundedTerminalDisposables;
    private _linkProviders;
    private _linkProviderDisposables;
    private _processSupportContextKey;
    private _primaryBackend?;
    private _terminalHasBeenCreated;
    private _terminalCountContextKey;
    private _configHelper;
    private _connectionState;
    private _nativeDelegate?;
    private _shutdownWindowCount?;
    private _editable;
    get isProcessSupportRegistered(): boolean;
    get connectionState(): TerminalConnectionState;
    get configHelper(): ITerminalConfigHelper;
    get instances(): ITerminalInstance[];
    private _reconnectedTerminals;
    getReconnectedTerminals(reconnectionOwner: string): ITerminalInstance[] | undefined;
    get defaultLocation(): TerminalLocation;
    private _activeInstance;
    get activeInstance(): ITerminalInstance | undefined;
    private readonly _onDidChangeActiveGroup;
    get onDidChangeActiveGroup(): Event<ITerminalGroup | undefined>;
    private readonly _onDidCreateInstance;
    get onDidCreateInstance(): Event<ITerminalInstance>;
    private readonly _onDidDisposeInstance;
    get onDidDisposeInstance(): Event<ITerminalInstance>;
    private readonly _onDidFocusInstance;
    get onDidFocusInstance(): Event<ITerminalInstance>;
    private readonly _onDidReceiveProcessId;
    get onDidReceiveProcessId(): Event<ITerminalInstance>;
    private readonly _onDidReceiveInstanceLinks;
    get onDidReceiveInstanceLinks(): Event<ITerminalInstance>;
    private readonly _onDidRequestStartExtensionTerminal;
    get onDidRequestStartExtensionTerminal(): Event<IStartExtensionTerminalRequest>;
    private readonly _onDidChangeInstanceDimensions;
    get onDidChangeInstanceDimensions(): Event<ITerminalInstance>;
    private readonly _onDidMaxiumumDimensionsChange;
    get onDidMaximumDimensionsChange(): Event<ITerminalInstance>;
    private readonly _onDidChangeInstanceCapability;
    get onDidChangeInstanceCapability(): Event<ITerminalInstance>;
    private readonly _onDidChangeInstances;
    get onDidChangeInstances(): Event<void>;
    private readonly _onDidChangeInstanceTitle;
    get onDidChangeInstanceTitle(): Event<ITerminalInstance | undefined>;
    private readonly _onDidChangeInstanceIcon;
    get onDidChangeInstanceIcon(): Event<{
        instance: ITerminalInstance;
        userInitiated: boolean;
    }>;
    private readonly _onDidChangeInstanceColor;
    get onDidChangeInstanceColor(): Event<{
        instance: ITerminalInstance;
        userInitiated: boolean;
    }>;
    private readonly _onDidChangeActiveInstance;
    get onDidChangeActiveInstance(): Event<ITerminalInstance | undefined>;
    private readonly _onDidChangeInstancePrimaryStatus;
    get onDidChangeInstancePrimaryStatus(): Event<ITerminalInstance>;
    private readonly _onDidInputInstanceData;
    get onDidInputInstanceData(): Event<ITerminalInstance>;
    private readonly _onDidDisposeGroup;
    get onDidDisposeGroup(): Event<ITerminalGroup>;
    private readonly _onDidChangeGroups;
    get onDidChangeGroups(): Event<void>;
    private readonly _onDidRegisterProcessSupport;
    get onDidRegisterProcessSupport(): Event<void>;
    private readonly _onDidChangeConnectionState;
    get onDidChangeConnectionState(): Event<void>;
    constructor(_contextKeyService: IContextKeyService, _lifecycleService: ILifecycleService, _logService: ILogService, _dialogService: IDialogService, _instantiationService: IInstantiationService, _remoteAgentService: IRemoteAgentService, _viewsService: IViewsService, _configurationService: IConfigurationService, _environmentService: IWorkbenchEnvironmentService, _terminalEditorService: ITerminalEditorService, _terminalGroupService: ITerminalGroupService, _terminalInstanceService: ITerminalInstanceService, _editorGroupsService: IEditorGroupsService, _terminalProfileService: ITerminalProfileService, _extensionService: IExtensionService, _notificationService: INotificationService, _workspaceContextService: IWorkspaceContextService, _commandService: ICommandService);
    showProfileQuickPick(type: 'setDefault' | 'createInstance', cwd?: string | URI): Promise<ITerminalInstance | undefined>;
    handleNewRegisteredBackend(backend: ITerminalBackend): void;
    getPrimaryBackend(): ITerminalBackend | undefined;
    private _forwardInstanceHostEvents;
    private _evaluateActiveInstance;
    setActiveInstance(value: ITerminalInstance): void;
    focusActiveInstance(): Promise<void>;
    createContributedTerminalProfile(extensionIdentifier: string, id: string, options: ICreateContributedTerminalProfileOptions): Promise<void>;
    safeDisposeTerminal(instance: ITerminalInstance): Promise<void>;
    private _setConnected;
    private _reconnectToRemoteTerminals;
    private _reconnectToLocalTerminals;
    private _recreateTerminalGroups;
    toggleEscapeSequenceLogging(): Promise<void>;
    private _attachProcessLayoutListeners;
    private _handleInstanceContextKeys;
    getActiveOrCreateInstance(): Promise<ITerminalInstance>;
    setEditable(instance: ITerminalInstance, data?: IEditableData | null): void;
    isEditable(instance: ITerminalInstance | undefined): boolean;
    getEditableData(instance: ITerminalInstance): IEditableData | undefined;
    requestStartExtensionTerminal(proxy: ITerminalProcessExtHostProxy, cols: number, rows: number): Promise<ITerminalLaunchError | undefined>;
    private _onBeforeShutdown;
    private _onBeforeShutdownAsync;
    setNativeDelegate(nativeDelegate: ITerminalServiceNativeDelegate): void;
    private _toggleDevTools;
    private _shouldReviveProcesses;
    private _onBeforeShutdownConfirmation;
    private _onWillShutdown;
    private _saveState;
    private _updateTitle;
    private _updateIcon;
    refreshActiveGroup(): void;
    doWithActiveInstance<T>(callback: (terminal: ITerminalInstance) => T): T | void;
    getInstanceFromId(terminalId: number): ITerminalInstance | undefined;
    getInstanceFromIndex(terminalIndex: number): ITerminalInstance;
    getInstanceFromResource(resource: URI | undefined): ITerminalInstance | undefined;
    isAttachedToTerminal(remoteTerm: IRemoteTerminalAttachTarget): boolean;
    moveToEditor(source: ITerminalInstance): void;
    moveToTerminalView(source?: ITerminalInstance, target?: ITerminalInstance, side?: 'before' | 'after'): Promise<void>;
    protected _initInstanceListeners(instance: ITerminalInstance): void;
    private _addInstanceToGroup;
    registerProcessSupport(isSupported: boolean): void;
    registerLinkProvider(linkProvider: ITerminalExternalLinkProvider): IDisposable;
    private _setInstanceLinkProviders;
    private _getIndexFromId;
    protected _showTerminalCloseConfirmation(singleTerminal?: boolean): Promise<boolean>;
    getDefaultInstanceHost(): ITerminalInstanceHost;
    getInstanceHost(location: ITerminalLocationOptions | undefined): ITerminalInstanceHost;
    createTerminal(options?: ICreateTerminalOptions): Promise<ITerminalInstance>;
    private _resolveCwd;
    private _splitTerminal;
    private _addToReconnected;
    private _createTerminal;
    resolveLocation(location?: ITerminalLocationOptions): TerminalLocation | undefined;
    private _getSplitParent;
    private _getEditorOptions;
    private _evaluateLocalCwd;
    protected _showBackgroundTerminal(instance: ITerminalInstance): void;
    setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): Promise<void>;
}

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import * as dom from 'vs/base/browser/dom';
import { normalizeGitHubUrl } from 'vs/platform/issue/common/issueReporterUtil';
import { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IProductService } from 'vs/platform/product/common/productService';
import { userAgent } from 'vs/base/common/platform';
let WebIssueService = class WebIssueService {
    extensionManagementService;
    productService;
    constructor(extensionManagementService, productService) {
        this.extensionManagementService = extensionManagementService;
        this.productService = productService;
    }
    //TODO @TylerLeonhardt @Tyriar to implement a process explorer for the web
    async openProcessExplorer() {
        console.error('openProcessExplorer is not implemented in web');
    }
    async openReporter(options) {
        let repositoryUrl = this.productService.reportIssueUrl;
        let selectedExtension;
        if (options.extensionId) {
            const extensions = await this.extensionManagementService.getInstalled(1 /* ExtensionType.User */);
            selectedExtension = extensions.filter(ext => ext.identifier.id === options.extensionId)[0];
            const extensionGitHubUrl = this.getExtensionGitHubUrl(selectedExtension);
            if (extensionGitHubUrl) {
                repositoryUrl = `${extensionGitHubUrl}/issues/new`;
            }
        }
        if (repositoryUrl) {
            repositoryUrl = `${repositoryUrl}?body=${encodeURIComponent(await this.getIssueDescription(selectedExtension))}&labels=web`;
            dom.windowOpenNoOpener(repositoryUrl);
        }
        else {
            throw new Error(`Unable to find issue reporting url for ${options.extensionId}`);
        }
    }
    getExtensionGitHubUrl(extension) {
        let repositoryUrl = '';
        const bugsUrl = extension?.manifest.bugs?.url;
        const extensionUrl = extension?.manifest.repository?.url;
        // If given, try to match the extension's bug url
        if (bugsUrl && bugsUrl.match(/^https?:\/\/github\.com\/(.*)/)) {
            repositoryUrl = normalizeGitHubUrl(bugsUrl);
        }
        else if (extensionUrl && extensionUrl.match(/^https?:\/\/github\.com\/(.*)/)) {
            repositoryUrl = normalizeGitHubUrl(extensionUrl);
        }
        return repositoryUrl;
    }
    async getIssueDescription(extension) {
        return `ADD ISSUE DESCRIPTION HERE

Version: ${this.productService.version}
Commit: ${this.productService.commit ?? 'unknown'}
User Agent: ${userAgent ?? 'unknown'}
Embedder: ${this.productService.embedderIdentifier ?? 'unknown'}
${extension?.manifest.version ? `\nExtension version: ${extension.manifest.version}` : ''}
<!-- generated by web issue reporter -->`;
    }
};
WebIssueService = __decorate([
    __param(0, IExtensionManagementService),
    __param(1, IProductService)
], WebIssueService);
export { WebIssueService };

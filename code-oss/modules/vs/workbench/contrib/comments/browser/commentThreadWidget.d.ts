import 'vs/css!./media/review';
import * as dom from 'vs/base/browser/dom';
import { Disposable } from 'vs/base/common/lifecycle';
import { URI } from 'vs/base/common/uri';
import * as languages from 'vs/editor/common/languages';
import { IMarkdownRendererOptions } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICommentService } from 'vs/workbench/contrib/comments/browser/commentService';
import { ICommentThreadWidget } from 'vs/workbench/contrib/comments/common/commentThreadWidget';
import { IColorTheme } from 'vs/platform/theme/common/themeService';
import { IRange } from 'vs/editor/common/core/range';
import { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';
import { FontInfo } from 'vs/editor/common/config/fontInfo';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
export declare const COMMENTEDITOR_DECORATION_KEY = "commenteditordecoration";
export declare class CommentThreadWidget<T extends IRange | ICellRange = IRange> extends Disposable implements ICommentThreadWidget {
    readonly container: HTMLElement;
    private _owner;
    private _parentResourceUri;
    private _contextKeyService;
    private _scopedInstatiationService;
    private _commentThread;
    private _pendingComment;
    private _markdownOptions;
    private _commentOptions;
    private _containerDelegate;
    private commentService;
    readonly contextMenuService: IContextMenuService;
    private _header;
    private _body;
    private _commentReply?;
    private _commentMenus;
    private _commentThreadDisposables;
    private _threadIsEmpty;
    private _styleElement;
    private _commentThreadContextValue;
    private _onDidResize;
    onDidResize: import("vs/base/common/event").Event<dom.Dimension>;
    get commentThread(): languages.CommentThread<T>;
    constructor(container: HTMLElement, _owner: string, _parentResourceUri: URI, _contextKeyService: IContextKeyService, _scopedInstatiationService: IInstantiationService, _commentThread: languages.CommentThread<T>, _pendingComment: string | null, _markdownOptions: IMarkdownRendererOptions, _commentOptions: languages.CommentOptions | undefined, _containerDelegate: {
        actionRunner: (() => void) | null;
        collapse: () => void;
    }, commentService: ICommentService, contextMenuService: IContextMenuService);
    private updateCurrentThread;
    private currentThreadListeners;
    updateCommentThread(commentThread: languages.CommentThread<T>): void;
    display(lineHeight: number): void;
    private _refresh;
    dispose(): void;
    private _bindCommentThreadListeners;
    private _createCommentForm;
    getCommentCoords(commentUniqueId: number): {
        thread: dom.IDomNodePagePosition;
        comment: dom.IDomNodePagePosition;
    } | undefined;
    getPendingComment(): string | null;
    getDimensions(): dom.Dimension;
    layout(widthInPixel?: number): void;
    focusCommentEditor(): void;
    focus(): void;
    submitComment(): Promise<void>;
    collapse(): void;
    applyTheme(theme: IColorTheme, fontInfo: FontInfo): void;
}

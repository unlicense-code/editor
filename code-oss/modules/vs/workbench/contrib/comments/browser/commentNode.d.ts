import * as languages from 'vs/editor/common/languages';
import { Action, IActionRunner } from 'vs/base/common/actions';
import { Disposable } from 'vs/base/common/lifecycle';
import { URI } from 'vs/base/common/uri';
import { IModelService } from 'vs/editor/common/services/model';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { MarkdownRenderer } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICommentService } from 'vs/workbench/contrib/comments/browser/commentService';
import { Event } from 'vs/base/common/event';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { ToolBar } from 'vs/base/browser/ui/toolbar/toolbar';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { ICommentThreadWidget } from 'vs/workbench/contrib/comments/common/commentThreadWidget';
import { SubmenuEntryActionViewItem } from 'vs/platform/actions/browser/menuEntryActionViewItem';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IRange } from 'vs/editor/common/core/range';
import { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';
export declare class CommentNode<T extends IRange | ICellRange> extends Disposable {
    private commentThread;
    comment: languages.Comment;
    private owner;
    private resource;
    private parentThread;
    private markdownRenderer;
    private instantiationService;
    private commentService;
    private modelService;
    private languageService;
    private notificationService;
    private contextMenuService;
    private configurationService;
    private _domNode;
    private _body;
    private _md;
    private _plainText;
    private _clearTimeout;
    private _editAction;
    private _commentEditContainer;
    private _commentDetailsContainer;
    private _actionsToolbarContainer;
    private _reactionsActionBar?;
    private _reactionActionsContainer?;
    private _commentEditor;
    private _commentEditorDisposables;
    private _commentEditorModel;
    private _isPendingLabel;
    private _timestamp;
    private _timestampWidget;
    private _contextKeyService;
    private _commentContextValue;
    private _commentMenus;
    protected actionRunner?: IActionRunner;
    protected toolbar: ToolBar | undefined;
    private _commentFormActions;
    private readonly _onDidClick;
    get domNode(): HTMLElement;
    isEditing: boolean;
    constructor(commentThread: languages.CommentThread<T>, comment: languages.Comment, owner: string, resource: URI, parentThread: ICommentThreadWidget, markdownRenderer: MarkdownRenderer, instantiationService: IInstantiationService, commentService: ICommentService, modelService: IModelService, languageService: ILanguageService, notificationService: INotificationService, contextMenuService: IContextMenuService, contextKeyService: IContextKeyService, configurationService: IConfigurationService);
    private updateCommentBody;
    get onDidClick(): Event<CommentNode<T>>;
    private createTimestamp;
    private updateTimestamp;
    private createHeader;
    private getToolbarActions;
    private get commentNodeContext();
    private createToolbar;
    private createActionsToolbar;
    actionViewItemProvider(action: Action): ActionViewItem | SubmenuEntryActionViewItem;
    submitComment(): Promise<void>;
    private createReactionPicker;
    private createReactionsContainer;
    get commentBodyValue(): string;
    private createCommentEditor;
    private removeCommentEditor;
    layout(): void;
    switchToEditMode(): void;
    setFocus(focused: boolean, visible?: boolean): void;
    private registerActionBarListeners;
    update(newComment: languages.Comment): void;
    private onContextMenu;
    focus(): void;
}

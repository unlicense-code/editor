import * as dom from 'vs/base/browser/dom';
import { Disposable } from 'vs/base/common/lifecycle';
import * as languages from 'vs/editor/common/languages';
import { ICommentService } from 'vs/workbench/contrib/comments/browser/commentService';
import { CommentNode } from 'vs/workbench/contrib/comments/browser/commentNode';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { URI } from 'vs/base/common/uri';
import { ICommentThreadWidget } from 'vs/workbench/contrib/comments/common/commentThreadWidget';
import { IMarkdownRendererOptions } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';
import { IRange } from 'vs/editor/common/core/range';
export declare class CommentThreadBody<T extends IRange | ICellRange = IRange> extends Disposable {
    readonly owner: string;
    readonly parentResourceUri: URI;
    readonly container: HTMLElement;
    private _options;
    private _commentThread;
    private _scopedInstatiationService;
    private _parentCommentThreadWidget;
    private commentService;
    private openerService;
    private languageService;
    private _commentsElement;
    private _commentElements;
    private _resizeObserver;
    private _focusedComment;
    private _onDidResize;
    onDidResize: import("vs/base/common/event").Event<dom.Dimension>;
    private _commentDisposable;
    private _markdownRenderer;
    get length(): number;
    get activeComment(): CommentNode<T>;
    constructor(owner: string, parentResourceUri: URI, container: HTMLElement, _options: IMarkdownRendererOptions, _commentThread: languages.CommentThread<T>, _scopedInstatiationService: IInstantiationService, _parentCommentThreadWidget: ICommentThreadWidget, commentService: ICommentService, openerService: IOpenerService, languageService: ILanguageService);
    focus(): void;
    display(): void;
    private _refresh;
    getDimensions(): dom.Dimension;
    layout(): void;
    getCommentCoords(commentUniqueId: number): {
        thread: dom.IDomNodePagePosition;
        comment: dom.IDomNodePagePosition;
    } | undefined;
    updateCommentThread(commentThread: languages.CommentThread<T>): void;
    private _updateAriaLabel;
    private _setFocusedComment;
    private createNewCommentNode;
    dispose(): void;
}

import { VSBuffer } from 'vs/base/common/buffer';
import { URI } from 'vs/base/common/uri';
import { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';
import { IResourceEditorInput } from 'vs/platform/editor/common/editor';
import { IFileService } from 'vs/platform/files/common/files';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ILabelService } from 'vs/platform/label/common/label';
import { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';
import { EditorInputCapabilities, GroupIdentifier, IMoveResult, IRevertOptions, ISaveOptions, IUntypedEditorInput, Verbosity } from 'vs/workbench/common/editor';
import { EditorInput } from 'vs/workbench/common/editor/editorInput';
import { ICustomEditorService } from 'vs/workbench/contrib/customEditor/common/customEditor';
import { IOverlayWebview } from 'vs/workbench/contrib/webview/browser/webview';
import { IWebviewWorkbenchService, LazilyResolvedWebviewEditorInput } from 'vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService';
interface CustomEditorInputInitInfo {
    readonly resource: URI;
    readonly viewType: string;
    readonly id: string;
}
export declare class CustomEditorInput extends LazilyResolvedWebviewEditorInput {
    private readonly instantiationService;
    private readonly labelService;
    private readonly customEditorService;
    private readonly fileDialogService;
    private readonly undoRedoService;
    private readonly fileService;
    static create(instantiationService: IInstantiationService, resource: URI, viewType: string, group: GroupIdentifier | undefined, options?: {
        readonly customClasses?: string;
        readonly oldResource?: URI;
    }): EditorInput;
    static readonly typeId = "workbench.editors.webviewEditor";
    private readonly _editorResource;
    readonly oldResource?: URI;
    private _defaultDirtyState;
    private readonly _backupId;
    private readonly _untitledDocumentData;
    get resource(): URI;
    private _modelRef?;
    constructor(init: CustomEditorInputInitInfo, webview: IOverlayWebview, options: {
        startsDirty?: boolean;
        backupId?: string;
        untitledDocumentData?: VSBuffer;
        readonly oldResource?: URI;
    }, webviewWorkbenchService: IWebviewWorkbenchService, instantiationService: IInstantiationService, labelService: ILabelService, customEditorService: ICustomEditorService, fileDialogService: IFileDialogService, undoRedoService: IUndoRedoService, fileService: IFileService);
    private registerListeners;
    private onLabelEvent;
    private updateLabel;
    get typeId(): string;
    get editorId(): string;
    get capabilities(): EditorInputCapabilities;
    getName(): string;
    getDescription(verbosity?: Verbosity): string | undefined;
    private _shortDescription;
    private get shortDescription();
    private _mediumDescription;
    private get mediumDescription();
    private _longDescription;
    private get longDescription();
    private _shortTitle;
    private get shortTitle();
    private _mediumTitle;
    private get mediumTitle();
    private _longTitle;
    private get longTitle();
    getTitle(verbosity?: Verbosity): string;
    matches(other: EditorInput | IUntypedEditorInput): boolean;
    copy(): EditorInput;
    isDirty(): boolean;
    save(groupId: GroupIdentifier, options?: ISaveOptions): Promise<EditorInput | IUntypedEditorInput | undefined>;
    saveAs(groupId: GroupIdentifier, options?: ISaveOptions): Promise<EditorInput | IUntypedEditorInput | undefined>;
    revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void>;
    resolve(): Promise<null>;
    rename(group: GroupIdentifier, newResource: URI): Promise<IMoveResult | undefined>;
    undo(): void | Promise<void>;
    redo(): void | Promise<void>;
    private _moveHandler?;
    onMove(handler: (newResource: URI) => void): void;
    protected transfer(other: CustomEditorInput): CustomEditorInput | undefined;
    get backupId(): string | undefined;
    get untitledDocumentData(): VSBuffer | undefined;
    toUntyped(): IResourceEditorInput;
}
export {};

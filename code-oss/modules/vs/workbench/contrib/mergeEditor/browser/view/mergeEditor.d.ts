import { Dimension } from 'vs/base/browser/dom';
import { CancellationToken } from 'vs/base/common/cancellation';
import { Event } from 'vs/base/common/event';
import { Disposable } from 'vs/base/common/lifecycle';
import { IObservable } from 'vs/base/common/observable';
import { URI } from 'vs/base/common/uri';
import 'vs/css!./media/mergeEditor';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';
import { IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';
import { ICodeEditorViewState } from 'vs/editor/common/editorCommon';
import { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IEditorOptions, ITextEditorOptions } from 'vs/platform/editor/common/editor';
import { IFileService } from 'vs/platform/files/common/files';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { AbstractTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';
import { IEditorOpenContext } from 'vs/workbench/common/editor';
import { EditorInput } from 'vs/workbench/common/editor/editorInput';
import { IMergeEditorInputModel } from 'vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel';
import { MergeEditorModel } from 'vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel';
import { MergeEditorViewModel } from 'vs/workbench/contrib/mergeEditor/browser/view/viewModel';
import { MergeEditorLayoutKind } from 'vs/workbench/contrib/mergeEditor/common/mergeEditor';
import { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
import { IEditorResolverService } from 'vs/workbench/services/editor/common/editorResolverService';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import './colors';
export declare class MergeEditor extends AbstractTextEditor<IMergeEditorViewState> {
    private readonly contextKeyService;
    private readonly _configurationService;
    private readonly _codeEditorService;
    private readonly configurationService;
    static readonly ID = "mergeEditor";
    private readonly _sessionDisposables;
    private readonly _viewModel;
    get viewModel(): IObservable<MergeEditorViewModel | undefined>;
    private rootHtmlElement;
    private readonly _grid;
    private readonly input1View;
    private readonly baseView;
    private readonly baseViewOptions;
    private readonly input2View;
    private readonly inputResultView;
    private readonly _layoutMode;
    private readonly _layoutModeObs;
    private readonly _ctxIsMergeEditor;
    private readonly _ctxUsesColumnLayout;
    private readonly _ctxShowBase;
    private readonly _ctxShowBaseAtTop;
    private readonly _ctxResultUri;
    private readonly _ctxBaseUri;
    private readonly _ctxShowNonConflictingChanges;
    private readonly _inputModel;
    get inputModel(): IObservable<IMergeEditorInputModel | undefined>;
    get model(): MergeEditorModel | undefined;
    private get inputsWritable();
    private readonly viewZoneComputer;
    protected readonly codeLensesVisible: IObservable<boolean, void>;
    private readonly scrollSynchronizer;
    constructor(instantiation: IInstantiationService, contextKeyService: IContextKeyService, telemetryService: ITelemetryService, storageService: IStorageService, themeService: IThemeService, textResourceConfigurationService: ITextResourceConfigurationService, _configurationService: IConfigurationService, editorService: IEditorService, editorGroupService: IEditorGroupsService, fileService: IFileService, _codeEditorService: ICodeEditorService, configurationService: IConfigurationService);
    dispose(): void;
    private readonly _onDidChangeSizeConstraints;
    readonly onDidChangeSizeConstraints: Event<void>;
    get minimumWidth(): number;
    getTitle(): string;
    protected createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void;
    protected updateEditorControlOptions(options: ICodeEditorOptions): void;
    private applyOptions;
    protected getMainControl(): ICodeEditor | undefined;
    layout(dimension: Dimension): void;
    setInput(input: EditorInput, options: IEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    private setViewZones;
    setOptions(options: ITextEditorOptions | undefined): void;
    clearInput(): void;
    focus(): void;
    hasFocus(): boolean;
    protected setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void;
    getControl(): ICodeEditor | undefined;
    get scopedContextKeyService(): IContextKeyService | undefined;
    toggleBase(): void;
    toggleShowBaseTop(): void;
    toggleShowBaseCenter(): void;
    setLayoutKind(kind: MergeEditorLayoutKind): void;
    setLayout(newLayout: IMergeEditorLayout): void;
    private readonly baseViewDisposables;
    private applyLayout;
    private setGrid;
    private _applyViewState;
    protected computeEditorViewState(resource: URI): IMergeEditorViewState | undefined;
    protected tracksEditorViewState(input: EditorInput): boolean;
    private readonly showNonConflictingChangesStore;
    private readonly showNonConflictingChanges;
    toggleShowNonConflictingChanges(): void;
}
export interface IMergeEditorLayout {
    readonly kind: MergeEditorLayoutKind;
    readonly showBase: boolean;
    readonly showBaseAtTop: boolean;
}
export declare class MergeEditorOpenHandlerContribution extends Disposable {
    private readonly _editorService;
    constructor(_editorService: IEditorService, codeEditorService: ICodeEditorService);
    private openCodeEditorFromMergeEditor;
}
export declare class MergeEditorResolverContribution extends Disposable {
    constructor(editorResolverService: IEditorResolverService, instantiationService: IInstantiationService);
}
declare type IMergeEditorViewState = ICodeEditorViewState & {
    readonly input1State?: ICodeEditorViewState;
    readonly input2State?: ICodeEditorViewState;
    readonly focusIndex: number;
};
export {};

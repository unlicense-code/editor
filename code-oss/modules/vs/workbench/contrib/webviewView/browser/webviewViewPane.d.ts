import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { IProgressService } from 'vs/platform/progress/common/progress';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { ViewPane } from 'vs/workbench/browser/parts/views/viewPane';
import { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';
import { IViewBadge, IViewDescriptorService, IViewsService } from 'vs/workbench/common/views';
import { IWebviewService } from 'vs/workbench/contrib/webview/browser/webview';
import { IWebviewViewService } from 'vs/workbench/contrib/webviewView/browser/webviewViewService';
import { IActivityService } from 'vs/workbench/services/activity/common/activity';
import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
export declare class WebviewViewPane extends ViewPane {
    private readonly activityService;
    private readonly extensionService;
    private readonly progressService;
    private readonly storageService;
    private readonly viewService;
    private readonly webviewService;
    private readonly webviewViewService;
    private static _originStore?;
    private static getOriginStore;
    private readonly _webview;
    private readonly _webviewDisposables;
    private _activated;
    private _container?;
    private _rootContainer?;
    private _resizeObserver?;
    private readonly defaultTitle;
    private setTitle;
    private badge;
    private activity;
    private readonly memento;
    private readonly viewState;
    private readonly extensionId?;
    private _repositionTimeout?;
    constructor(options: IViewletViewOptions, configurationService: IConfigurationService, contextKeyService: IContextKeyService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService, keybindingService: IKeybindingService, openerService: IOpenerService, telemetryService: ITelemetryService, themeService: IThemeService, viewDescriptorService: IViewDescriptorService, activityService: IActivityService, extensionService: IExtensionService, progressService: IProgressService, storageService: IStorageService, viewService: IViewsService, webviewService: IWebviewService, webviewViewService: IWebviewViewService);
    private readonly _onDidChangeVisibility;
    readonly onDidChangeVisibility: import("vs/base/common/event").Event<boolean>;
    private readonly _onDispose;
    readonly onDispose: import("vs/base/common/event").Event<void>;
    dispose(): void;
    focus(): void;
    renderBody(container: HTMLElement): void;
    saveState(): void;
    protected layoutBody(height: number, width: number): void;
    private updateTreeVisibility;
    private activate;
    protected updateTitle(value: string | undefined): void;
    protected updateBadge(badge: IViewBadge | undefined): void;
    private withProgress;
    onDidScrollRoot(): void;
    private layoutWebview;
    private findRootContainer;
}

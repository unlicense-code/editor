import { Disposable } from 'vs/base/common/lifecycle';
import { Event } from 'vs/base/common/event';
import { Dimension, IDimension } from 'vs/base/browser/dom';
import { Position, Parts, IWorkbenchLayoutService, PanelAlignment } from 'vs/workbench/services/layout/browser/layoutService';
import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
import { Direction } from 'vs/base/browser/ui/grid/grid';
import { Part } from 'vs/workbench/browser/part';
export declare abstract class Layout extends Disposable implements IWorkbenchLayoutService {
    protected readonly parent: HTMLElement;
    readonly _serviceBrand: undefined;
    private readonly _onDidChangeZenMode;
    readonly onDidChangeZenMode: Event<boolean>;
    private readonly _onDidChangeFullscreen;
    readonly onDidChangeFullscreen: Event<boolean>;
    private readonly _onDidChangeCenteredLayout;
    readonly onDidChangeCenteredLayout: Event<boolean>;
    private readonly _onDidChangePanelAlignment;
    readonly onDidChangePanelAlignment: Event<PanelAlignment>;
    private readonly _onDidChangeWindowMaximized;
    readonly onDidChangeWindowMaximized: Event<boolean>;
    private readonly _onDidChangePanelPosition;
    readonly onDidChangePanelPosition: Event<string>;
    private readonly _onDidChangePartVisibility;
    readonly onDidChangePartVisibility: Event<void>;
    private readonly _onDidChangeNotificationsVisibility;
    readonly onDidChangeNotificationsVisibility: Event<boolean>;
    private readonly _onDidLayout;
    readonly onDidLayout: Event<IDimension>;
    readonly hasContainer = true;
    readonly container: HTMLDivElement;
    private _dimension;
    get dimension(): IDimension;
    get offset(): {
        top: number;
        quickPickTop: number;
    };
    private readonly parts;
    private initialized;
    private workbenchGrid;
    private titleBarPartView;
    private bannerPartView;
    private activityBarPartView;
    private sideBarPartView;
    private panelPartView;
    private auxiliaryBarPartView;
    private editorPartView;
    private statusBarPartView;
    private environmentService;
    private extensionService;
    private configurationService;
    private storageService;
    private hostService;
    private editorService;
    private editorGroupService;
    private paneCompositeService;
    private titleService;
    private viewDescriptorService;
    private contextService;
    private workingCopyBackupService;
    private notificationService;
    private themeService;
    private statusBarService;
    private logService;
    private telemetryService;
    private state;
    private stateModel;
    private disposed;
    constructor(parent: HTMLElement);
    protected initLayout(accessor: ServicesAccessor): void;
    private registerLayoutListeners;
    private onMenubarToggled;
    private onFullscreenChanged;
    private onWindowFocusChanged;
    private doUpdateLayoutConfiguration;
    private setSideBarPosition;
    private updateWindowBorder;
    private updateStyles;
    private initLayoutState;
    private getDefaultLayoutViews;
    private shouldRestoreEditors;
    protected willRestoreEditors(): boolean;
    private resolveEditorsToOpen;
    private _openedDefaultEditors;
    get openedDefaultEditors(): boolean;
    private getInitialEditorsState;
    private readonly whenReadyPromise;
    protected readonly whenReady: Promise<void>;
    private readonly whenRestoredPromise;
    readonly whenRestored: Promise<void>;
    private restored;
    isRestored(): boolean;
    protected restoreParts(): void;
    registerPart(part: Part): void;
    protected getPart(key: Parts): Part;
    registerNotifications(delegate: {
        onDidChangeNotificationsVisibility: Event<boolean>;
    }): void;
    hasFocus(part: Parts): boolean;
    focusPart(part: Parts): void;
    getContainer(part: Parts): HTMLElement | undefined;
    isVisible(part: Parts): boolean;
    private shouldShowTitleBar;
    private shouldShowBannerFirst;
    focus(): void;
    getDimension(part: Parts): Dimension | undefined;
    getMaximumEditorDimensions(): Dimension;
    toggleZenMode(skipLayout?: boolean, restoring?: boolean): void;
    private setStatusBarHidden;
    protected createWorkbenchLayout(): void;
    private getClientArea;
    layout(): void;
    isEditorLayoutCentered(): boolean;
    centerEditorLayout(active: boolean, skipLayout?: boolean): void;
    resizePart(part: Parts, sizeChangeWidth: number, sizeChangeHeight: number): void;
    private setActivityBarHidden;
    private setBannerHidden;
    private setEditorHidden;
    getLayoutClasses(): string[];
    private setSideBarHidden;
    private hasViews;
    private adjustPartPositions;
    setPanelAlignment(alignment: PanelAlignment, skipLayout?: boolean): void;
    private setPanelHidden;
    toggleMaximizedPanel(): void;
    /**
     * Returns whether or not the panel opens maximized
     */
    private panelOpensMaximized;
    private setAuxiliaryBarHidden;
    setPartHidden(hidden: boolean, part: Parts): void;
    hasWindowBorder(): boolean;
    getWindowBorderWidth(): number;
    getWindowBorderRadius(): string | undefined;
    isPanelMaximized(): boolean;
    getSideBarPosition(): Position;
    getPanelAlignment(): PanelAlignment;
    updateMenubarVisibility(skipLayout: boolean): void;
    toggleMenuBar(): void;
    getPanelPosition(): Position;
    setPanelPosition(position: Position): void;
    isWindowMaximized(): boolean;
    updateWindowMaximizedState(maximized: boolean): void;
    getVisibleNeighborPart(part: Parts, direction: Direction): Parts | undefined;
    private onDidChangeWCO;
    private arrangeEditorNodes;
    private arrangeMiddleSectionNodes;
    private createGridDescriptor;
    dispose(): void;
}

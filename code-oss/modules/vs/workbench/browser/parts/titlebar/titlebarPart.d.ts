import 'vs/css!./media/titlebarpart';
import { Part } from 'vs/workbench/browser/part';
import { ITitleService, ITitleProperties } from 'vs/workbench/services/title/common/titleService';
import { MenuBarVisibility } from 'vs/platform/window/common/window';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';
import { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { Dimension } from 'vs/base/browser/dom';
import { CustomMenubarControl } from 'vs/workbench/browser/parts/titlebar/menubarControl';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { Event } from 'vs/base/common/event';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';
import { MenuId } from 'vs/platform/actions/common/actions';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IHostService } from 'vs/workbench/services/host/browser/host';
import { IHoverService } from 'vs/workbench/services/hover/browser/hover';
export declare class TitlebarPart extends Part implements ITitleService {
    private readonly contextMenuService;
    protected readonly configurationService: IConfigurationService;
    protected readonly environmentService: IBrowserWorkbenchEnvironmentService;
    protected readonly instantiationService: IInstantiationService;
    private readonly contextKeyService;
    private readonly hostService;
    private static readonly configCommandCenter;
    readonly _serviceBrand: undefined;
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    get minimumHeight(): number;
    get maximumHeight(): number;
    private _onMenubarVisibilityChange;
    readonly onMenubarVisibilityChange: Event<boolean>;
    private readonly _onDidChangeCommandCenterVisibility;
    readonly onDidChangeCommandCenterVisibility: Event<void>;
    protected rootContainer: HTMLElement;
    protected windowControls: HTMLElement | undefined;
    protected dragRegion: HTMLElement | undefined;
    protected title: HTMLElement;
    protected customMenubar: CustomMenubarControl | undefined;
    protected appIcon: HTMLElement | undefined;
    private appIconBadge;
    protected menubar?: HTMLElement;
    protected layoutControls: HTMLElement | undefined;
    private layoutToolbar;
    protected lastLayoutDimensions: Dimension | undefined;
    private hoverDelegate;
    private readonly titleDisposables;
    private titleBarStyle;
    private isInactive;
    private readonly windowTitle;
    constructor(contextMenuService: IContextMenuService, configurationService: IConfigurationService, environmentService: IBrowserWorkbenchEnvironmentService, instantiationService: IInstantiationService, themeService: IThemeService, storageService: IStorageService, layoutService: IWorkbenchLayoutService, contextKeyService: IContextKeyService, hostService: IHostService, hoverService: IHoverService);
    updateProperties(properties: ITitleProperties): void;
    get isCommandCenterVisible(): boolean;
    private registerListeners;
    private onBlur;
    private onFocus;
    protected onConfigurationChanged(event: IConfigurationChangeEvent): void;
    protected onMenubarVisibilityChanged(visible: boolean): void;
    private uninstallMenubar;
    protected installMenubar(): void;
    private updateTitle;
    createContentArea(parent: HTMLElement): HTMLElement;
    updateStyles(): void;
    protected onContextMenu(e: MouseEvent, menuId: MenuId): void;
    protected adjustTitleMarginToCenter(): void;
    protected get currentMenubarVisibility(): MenuBarVisibility;
    private get layoutControlEnabled();
    protected get useCounterZoom(): boolean;
    updateLayout(dimension: Dimension): void;
    layout(width: number, height: number): void;
    toJSON(): object;
}

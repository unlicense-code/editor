import { Dimension } from 'vs/base/browser/dom';
import { IActionViewItem } from 'vs/base/browser/ui/actionbar/actionbar';
import { IPaneViewOptions } from 'vs/base/browser/ui/splitview/paneview';
import { IAction } from 'vs/base/common/actions';
import { Event } from 'vs/base/common/event';
import 'vs/css!./media/paneviewlet';
import { Action2, IAction2Options, MenuId } from 'vs/platform/actions/common/actions';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';
import { IColorMapping } from 'vs/platform/theme/common/styler';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { CompositeMenuActions } from 'vs/workbench/browser/actions';
import { ViewPane } from 'vs/workbench/browser/parts/views/viewPane';
import { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';
import { Component } from 'vs/workbench/common/component';
import { IAddedViewDescriptorRef, IView, IViewContainerModel, IViewDescriptor, IViewDescriptorService, IViewPaneContainer, ViewContainer } from 'vs/workbench/common/views';
import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
import { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';
export declare const ViewsSubMenu: MenuId;
export interface IPaneColors extends IColorMapping {
    dropBackground?: ColorIdentifier;
    headerForeground?: ColorIdentifier;
    headerBackground?: ColorIdentifier;
    headerBorder?: ColorIdentifier;
    leftBorder?: ColorIdentifier;
}
export interface IViewPaneContainerOptions extends IPaneViewOptions {
    mergeViewWithContainerWhenSingleView: boolean;
}
export declare class ViewPaneContainer extends Component implements IViewPaneContainer {
    private options;
    protected instantiationService: IInstantiationService;
    protected configurationService: IConfigurationService;
    protected layoutService: IWorkbenchLayoutService;
    protected contextMenuService: IContextMenuService;
    protected telemetryService: ITelemetryService;
    protected extensionService: IExtensionService;
    protected storageService: IStorageService;
    protected contextService: IWorkspaceContextService;
    protected viewDescriptorService: IViewDescriptorService;
    readonly viewContainer: ViewContainer;
    private lastFocusedPane;
    private lastMergedCollapsedPane;
    private paneItems;
    private paneview?;
    private visible;
    private areExtensionsReady;
    private didLayout;
    private dimension;
    private readonly visibleViewsCountFromCache;
    private readonly visibleViewsStorageId;
    protected readonly viewContainerModel: IViewContainerModel;
    private viewDisposables;
    private readonly _onTitleAreaUpdate;
    readonly onTitleAreaUpdate: Event<void>;
    private readonly _onDidChangeVisibility;
    readonly onDidChangeVisibility: Event<boolean>;
    private readonly _onDidAddViews;
    readonly onDidAddViews: Event<IView[]>;
    private readonly _onDidRemoveViews;
    readonly onDidRemoveViews: Event<IView[]>;
    private readonly _onDidChangeViewVisibility;
    readonly onDidChangeViewVisibility: Event<IView>;
    private readonly _onDidFocusView;
    readonly onDidFocusView: Event<IView>;
    private readonly _onDidBlurView;
    readonly onDidBlurView: Event<IView>;
    get onDidSashChange(): Event<number>;
    get panes(): ViewPane[];
    get views(): IView[];
    get length(): number;
    private _menuActions?;
    get menuActions(): CompositeMenuActions | undefined;
    constructor(id: string, options: IViewPaneContainerOptions, instantiationService: IInstantiationService, configurationService: IConfigurationService, layoutService: IWorkbenchLayoutService, contextMenuService: IContextMenuService, telemetryService: ITelemetryService, extensionService: IExtensionService, themeService: IThemeService, storageService: IStorageService, contextService: IWorkspaceContextService, viewDescriptorService: IViewDescriptorService);
    create(parent: HTMLElement): void;
    getTitle(): string;
    private showContextMenu;
    getActionsContext(): unknown;
    getActionViewItem(action: IAction): IActionViewItem | undefined;
    focus(): void;
    private get orientation();
    layout(dimension: Dimension): void;
    getOptimalWidth(): number;
    addPanes(panes: {
        pane: ViewPane;
        size: number;
        index?: number;
    }[]): void;
    setVisible(visible: boolean): void;
    isVisible(): boolean;
    protected updateTitleArea(): void;
    protected createView(viewDescriptor: IViewDescriptor, options: IViewletViewOptions): ViewPane;
    getView(id: string): ViewPane | undefined;
    private saveViewSizes;
    private restoreViewSizes;
    private computeInitialSizes;
    saveState(): void;
    private onContextMenu;
    openView(id: string, focus?: boolean): IView | undefined;
    protected onDidAddViewDescriptors(added: IAddedViewDescriptorRef[]): ViewPane[];
    private onDidRemoveViewDescriptors;
    toggleViewVisibility(viewId: string): void;
    private addPane;
    removePanes(panes: ViewPane[]): void;
    private removePane;
    movePane(from: ViewPane, to: ViewPane): void;
    resizePane(pane: ViewPane, size: number): void;
    getPaneSize(pane: ViewPane): number;
    private updateViewHeaders;
    isViewMergedWithContainer(): boolean;
    private onDidScrollPane;
    private onDidSashReset;
    dispose(): void;
}
export declare abstract class ViewPaneContainerAction<T extends IViewPaneContainer> extends Action2 {
    readonly desc: Readonly<IAction2Options> & {
        viewPaneContainerId: string;
    };
    constructor(desc: Readonly<IAction2Options> & {
        viewPaneContainerId: string;
    });
    run(accessor: ServicesAccessor, ...args: any[]): any;
    abstract runInViewPaneContainer(accessor: ServicesAccessor, viewPaneContainer: T, ...args: any[]): any;
}

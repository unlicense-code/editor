import { Disposable } from 'vs/base/common/lifecycle';
import { IViewDescriptorService, ViewContainer, IView, ViewContainerLocation, IViewsService, IViewPaneContainer } from 'vs/workbench/common/views';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { Event } from 'vs/base/common/event';
import { IPaneComposite } from 'vs/workbench/common/panecomposite';
import { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';
import { IProgressIndicator } from 'vs/platform/progress/common/progress';
import { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';
export declare class ViewsService extends Disposable implements IViewsService {
    private readonly viewDescriptorService;
    private readonly paneCompositeService;
    private readonly contextKeyService;
    private readonly layoutService;
    readonly _serviceBrand: undefined;
    private readonly viewDisposable;
    private readonly viewPaneContainers;
    private readonly _onDidChangeViewVisibility;
    readonly onDidChangeViewVisibility: Event<{
        id: string;
        visible: boolean;
    }>;
    private readonly _onDidChangeViewContainerVisibility;
    readonly onDidChangeViewContainerVisibility: Event<{
        id: string;
        visible: boolean;
        location: ViewContainerLocation;
    }>;
    private readonly visibleViewContextKeys;
    private readonly focusedViewContextKey;
    constructor(viewDescriptorService: IViewDescriptorService, paneCompositeService: IPaneCompositePartService, contextKeyService: IContextKeyService, layoutService: IWorkbenchLayoutService);
    private onViewsAdded;
    private onViewsVisibilityChanged;
    private onViewsRemoved;
    private getOrCreateActiveViewContextKey;
    private onDidChangeContainers;
    private onDidRegisterViewContainer;
    private onDidChangeContainerLocation;
    private onViewDescriptorsAdded;
    private onViewDescriptorsRemoved;
    private openComposite;
    private getComposite;
    isViewContainerVisible(id: string): boolean;
    getVisibleViewContainer(location: ViewContainerLocation): ViewContainer | null;
    getActiveViewPaneContainerWithId(viewContainerId: string): IViewPaneContainer | null;
    openViewContainer(id: string, focus?: boolean): Promise<IPaneComposite | null>;
    closeViewContainer(id: string): Promise<void>;
    isViewVisible(id: string): boolean;
    getActiveViewWithId<T extends IView>(id: string): T | null;
    getViewWithId<T extends IView>(id: string): T | null;
    openView<T extends IView>(id: string, focus?: boolean): Promise<T | null>;
    closeView(id: string): void;
    private getActiveViewPaneContainer;
    getViewProgressIndicator(viewId: string): IProgressIndicator | undefined;
    private getViewContainerProgressIndicator;
    private registerOpenViewContainerAction;
    private registerOpenViewAction;
    private registerFocusViewAction;
    private registerResetViewLocationAction;
    private registerPaneComposite;
    private deregisterPaneComposite;
    private createViewPaneContainer;
}
export declare function getPartByLocation(viewContainerLocation: ViewContainerLocation): Parts.AUXILIARYBAR_PART | Parts.SIDEBAR_PART | Parts.PANEL_PART;

import 'vs/css!./media/statusbarpart';
import { IDisposable } from 'vs/base/common/lifecycle';
import { Part } from 'vs/workbench/browser/part';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { StatusbarAlignment, IStatusbarService, IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarStyleOverride, IStatusbarEntryLocation } from 'vs/workbench/services/statusbar/browser/statusbar';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IHoverService } from 'vs/workbench/services/hover/browser/hover';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
export declare class StatusbarPart extends Part implements IStatusbarService {
    private readonly instantiationService;
    private readonly contextService;
    private readonly storageService;
    private contextMenuService;
    private readonly contextKeyService;
    private readonly hoverService;
    private readonly configurationService;
    readonly _serviceBrand: undefined;
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    readonly minimumHeight: number;
    readonly maximumHeight: number;
    private styleElement;
    private pendingEntries;
    private readonly viewModel;
    readonly onDidChangeEntryVisibility: import("../../../workbench.web.main").Event<{
        id: string;
        visible: boolean;
    }>;
    private leftItemsContainer;
    private rightItemsContainer;
    private readonly hoverDelegate;
    private readonly compactEntriesDisposable;
    private readonly styleOverrides;
    constructor(instantiationService: IInstantiationService, themeService: IThemeService, contextService: IWorkspaceContextService, storageService: IStorageService, layoutService: IWorkbenchLayoutService, contextMenuService: IContextMenuService, contextKeyService: IContextKeyService, hoverService: IHoverService, configurationService: IConfigurationService);
    private registerListeners;
    addEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation?: number | IStatusbarEntryLocation): IStatusbarEntryAccessor;
    private doAddPendingEntry;
    private doAddEntry;
    private doCreateStatusItem;
    private doAddOrRemoveModelEntry;
    isEntryVisible(id: string): boolean;
    updateEntryVisibility(id: string, visible: boolean): void;
    focusNextEntry(): void;
    focusPreviousEntry(): void;
    isEntryFocused(): boolean;
    focus(preserveEntryFocus?: boolean): void;
    createContentArea(parent: HTMLElement): HTMLElement;
    private createInitialStatusbarEntries;
    private appendStatusbarEntries;
    private appendStatusbarEntry;
    private updateCompactEntries;
    private showContextMenu;
    private getContextMenuActions;
    updateStyles(): void;
    layout(width: number, height: number, top: number, left: number): void;
    overrideStyle(style: IStatusbarStyleOverride): IDisposable;
    toJSON(): object;
}

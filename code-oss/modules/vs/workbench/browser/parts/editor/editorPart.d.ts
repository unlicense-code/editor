import { IThemeService } from 'vs/platform/theme/common/themeService';
import { Part } from 'vs/workbench/browser/part';
import { Dimension } from 'vs/base/browser/dom';
import { Event } from 'vs/base/common/event';
import { GroupDirection, IAddGroupOptions, GroupsArrangement, GroupOrientation, IMergeGroupOptions, GroupsOrder, IFindGroupScope, EditorGroupLayout, IEditorGroupsService, IEditorSideGroup } from 'vs/workbench/services/editor/common/editorGroupsService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { LayoutPriority, IViewSize } from 'vs/base/browser/ui/grid/grid';
import { GroupIdentifier, IEditorPartOptions, IEditorPartOptionsChangeEvent } from 'vs/workbench/common/editor';
import { IEditorGroupsAccessor, IEditorGroupView, IEditorPartCreationOptions } from 'vs/workbench/browser/parts/editor/editor';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IEditorDropTargetDelegate } from 'vs/workbench/browser/parts/editor/editorDropTarget';
import { IEditorDropService } from 'vs/workbench/services/editor/browser/editorDropService';
import { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';
import { IBoundarySashes } from 'vs/base/browser/ui/grid/gridview';
export declare class EditorPart extends Part implements IEditorGroupsService, IEditorGroupsAccessor, IEditorDropService {
    private readonly instantiationService;
    private readonly configurationService;
    readonly _serviceBrand: undefined;
    private static readonly EDITOR_PART_UI_STATE_STORAGE_KEY;
    private static readonly EDITOR_PART_CENTERED_VIEW_STORAGE_KEY;
    private readonly _onDidLayout;
    readonly onDidLayout: Event<Dimension>;
    private readonly _onDidChangeActiveGroup;
    readonly onDidChangeActiveGroup: Event<IEditorGroupView>;
    private readonly _onDidChangeGroupIndex;
    readonly onDidChangeGroupIndex: Event<IEditorGroupView>;
    private readonly _onDidChangeGroupLocked;
    readonly onDidChangeGroupLocked: Event<IEditorGroupView>;
    private readonly _onDidActivateGroup;
    readonly onDidActivateGroup: Event<IEditorGroupView>;
    private readonly _onDidAddGroup;
    readonly onDidAddGroup: Event<IEditorGroupView>;
    private readonly _onDidRemoveGroup;
    readonly onDidRemoveGroup: Event<IEditorGroupView>;
    private readonly _onDidMoveGroup;
    readonly onDidMoveGroup: Event<IEditorGroupView>;
    private readonly onDidSetGridWidget;
    private readonly _onDidChangeSizeConstraints;
    readonly onDidChangeSizeConstraints: Event<{
        width: number;
        height: number;
    } | undefined>;
    private readonly _onDidScroll;
    readonly onDidScroll: Event<void>;
    private readonly _onDidChangeEditorPartOptions;
    readonly onDidChangeEditorPartOptions: Event<IEditorPartOptionsChangeEvent>;
    private readonly workspaceMemento;
    private readonly profileMemento;
    private readonly groupViews;
    private mostRecentActiveGroups;
    private container;
    private centeredLayoutWidget;
    private gridWidget;
    private readonly gridWidgetView;
    constructor(instantiationService: IInstantiationService, themeService: IThemeService, configurationService: IConfigurationService, storageService: IStorageService, layoutService: IWorkbenchLayoutService);
    private registerListeners;
    private onConfigurationUpdated;
    private handleChangedPartOptions;
    private enforcedPartOptions;
    private _partOptions;
    get partOptions(): IEditorPartOptions;
    enforcePartOptions(options: IEditorPartOptions): IDisposable;
    private _top;
    private _left;
    private _contentDimension;
    get contentDimension(): Dimension;
    private _activeGroup;
    get activeGroup(): IEditorGroupView;
    readonly sideGroup: IEditorSideGroup;
    get groups(): IEditorGroupView[];
    get count(): number;
    get orientation(): GroupOrientation;
    private _isReady;
    get isReady(): boolean;
    private readonly whenReadyPromise;
    readonly whenReady: Promise<void>;
    private readonly whenRestoredPromise;
    readonly whenRestored: Promise<void>;
    get hasRestorableState(): boolean;
    getGroups(order?: GroupsOrder): IEditorGroupView[];
    private fillGridNodes;
    getGroup(identifier: GroupIdentifier): IEditorGroupView | undefined;
    findGroup(scope: IFindGroupScope, source?: IEditorGroupView | GroupIdentifier, wrap?: boolean): IEditorGroupView | undefined;
    private doFindGroupByDirection;
    private doFindGroupByLocation;
    activateGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView;
    restoreGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView;
    getSize(group: IEditorGroupView | GroupIdentifier): {
        width: number;
        height: number;
    };
    setSize(group: IEditorGroupView | GroupIdentifier, size: {
        width: number;
        height: number;
    }): void;
    arrangeGroups(arrangement: GroupsArrangement, target?: IEditorGroupView): void;
    isGroupMaximized(targetGroup: IEditorGroupView): boolean;
    setGroupOrientation(orientation: GroupOrientation): void;
    applyLayout(layout: EditorGroupLayout): void;
    private shouldRestoreFocus;
    private isTwoDimensionalGrid;
    addGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection, options?: IAddGroupOptions): IEditorGroupView;
    private doAddGroup;
    private getSplitSizingStyle;
    private doCreateGroupView;
    private doSetGroupActive;
    private doRestoreGroup;
    private doUpdateMostRecentActive;
    private toGridViewDirection;
    private toGridViewOrientation;
    removeGroup(group: IEditorGroupView | GroupIdentifier): void;
    private doRemoveGroupWithEditors;
    private doRemoveEmptyGroup;
    moveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;
    copyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;
    mergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): IEditorGroupView;
    mergeAllGroups(target?: IEditorGroupView): IEditorGroupView;
    private assertGroupView;
    createEditorDropTarget(container: HTMLElement, delegate: IEditorDropTargetDelegate): IDisposable;
    get minimumWidth(): number;
    get maximumWidth(): number;
    get minimumHeight(): number;
    get maximumHeight(): number;
    get snap(): boolean;
    get onDidChange(): Event<IViewSize | undefined>;
    readonly priority: LayoutPriority;
    private get gridSeparatorBorder();
    updateStyles(): void;
    protected createContentArea(parent: HTMLElement, options?: IEditorPartCreationOptions): HTMLElement;
    private setupDragAndDropSupport;
    centerLayout(active: boolean): void;
    isLayoutCentered(): boolean;
    private doCreateGridControl;
    private doCreateGridControlWithPreviousState;
    private doCreateGridControlWithState;
    private doSetGridWidget;
    private updateContainer;
    private notifyGroupIndexChange;
    private get isEmpty();
    setBoundarySashes(sashes: IBoundarySashes): void;
    layout(width: number, height: number, top: number, left: number): void;
    private doLayout;
    protected saveState(): void;
    toJSON(): object;
    dispose(): void;
}

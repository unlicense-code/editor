import 'vs/css!./media/editorgroupview';
import { IGroupModelChangeEvent, ISerializedEditorGroupModel } from 'vs/workbench/common/editor/editorGroupModel';
import { GroupIdentifier, IEditorCloseEvent, IEditorPane, EditorsOrder, IVisibleEditorPane, IUntypedEditorInput, IEditorWillMoveEvent, IEditorWillOpenEvent, IMatchEditorOptions, IActiveEditorChangeEvent, IFindEditorOptions } from 'vs/workbench/common/editor';
import { EditorInput } from 'vs/workbench/common/editor/editorInput';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IThemeService, Themable } from 'vs/platform/theme/common/themeService';
import { ICloseEditorsFilter, ICloseEditorOptions, ICloseAllEditorsOptions, IEditorReplacement } from 'vs/workbench/services/editor/common/editorGroupsService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IEditorGroupsAccessor, IEditorGroupView, EditorServiceImpl, IEditorGroupTitleHeight, IInternalEditorTitleControlOptions } from 'vs/workbench/browser/parts/editor/editor';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMenuService } from 'vs/platform/actions/common/actions';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IEditorOptions } from 'vs/platform/editor/common/editor';
import { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';
import { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';
import { URI } from 'vs/base/common/uri';
import { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';
import { ILogService } from 'vs/platform/log/common/log';
export declare class EditorGroupView extends Themable implements IEditorGroupView {
    private accessor;
    private _index;
    private readonly instantiationService;
    private readonly contextKeyService;
    private readonly telemetryService;
    private readonly keybindingService;
    private readonly menuService;
    private readonly contextMenuService;
    private readonly fileDialogService;
    private readonly editorService;
    private readonly filesConfigurationService;
    private readonly uriIdentityService;
    private readonly logService;
    static createNew(accessor: IEditorGroupsAccessor, index: number, instantiationService: IInstantiationService): IEditorGroupView;
    static createFromSerialized(serialized: ISerializedEditorGroupModel, accessor: IEditorGroupsAccessor, index: number, instantiationService: IInstantiationService): IEditorGroupView;
    static createCopy(copyFrom: IEditorGroupView, accessor: IEditorGroupsAccessor, index: number, instantiationService: IInstantiationService): IEditorGroupView;
    /**
     * Access to the context key service scoped to this editor group.
     */
    readonly scopedContextKeyService: IContextKeyService;
    private readonly _onDidFocus;
    readonly onDidFocus: import("vs/base/common/event").Event<void>;
    private readonly _onWillDispose;
    readonly onWillDispose: import("vs/base/common/event").Event<void>;
    private readonly _onDidModelChange;
    readonly onDidModelChange: import("vs/base/common/event").Event<IGroupModelChangeEvent>;
    private readonly _onDidActiveEditorChange;
    readonly onDidActiveEditorChange: import("vs/base/common/event").Event<IActiveEditorChangeEvent>;
    private readonly _onDidOpenEditorFail;
    readonly onDidOpenEditorFail: import("vs/base/common/event").Event<EditorInput>;
    private readonly _onWillCloseEditor;
    readonly onWillCloseEditor: import("vs/base/common/event").Event<IEditorCloseEvent>;
    private readonly _onDidCloseEditor;
    readonly onDidCloseEditor: import("vs/base/common/event").Event<IEditorCloseEvent>;
    private readonly _onWillMoveEditor;
    readonly onWillMoveEditor: import("vs/base/common/event").Event<IEditorWillMoveEvent>;
    private readonly _onWillOpenEditor;
    readonly onWillOpenEditor: import("vs/base/common/event").Event<IEditorWillOpenEvent>;
    private readonly model;
    private active;
    private lastLayout;
    private readonly scopedInstantiationService;
    private readonly titleContainer;
    private titleAreaControl;
    private readonly progressBar;
    private readonly editorContainer;
    private readonly editorPane;
    private readonly disposedEditorsWorker;
    private readonly mapEditorToPendingConfirmation;
    private readonly containerToolBarMenuDisposable;
    private readonly whenRestoredPromise;
    readonly whenRestored: Promise<void>;
    constructor(accessor: IEditorGroupsAccessor, from: IEditorGroupView | ISerializedEditorGroupModel | null, _index: number, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, themeService: IThemeService, telemetryService: ITelemetryService, keybindingService: IKeybindingService, menuService: IMenuService, contextMenuService: IContextMenuService, fileDialogService: IFileDialogService, editorService: EditorServiceImpl, filesConfigurationService: IFilesConfigurationService, uriIdentityService: IUriIdentityService, logService: ILogService);
    private handleGroupContextKeys;
    private registerContainerListeners;
    private createContainerToolbar;
    private createContainerContextMenu;
    private onShowContainerContextMenu;
    private doTrackFocus;
    private updateContainer;
    private updateTitleContainer;
    private createTitleAreaControl;
    private restoreEditors;
    private registerListeners;
    private onDidGroupModelChange;
    private onDidOpenEditor;
    private handleOnDidCloseEditor;
    private canDispose;
    private toEditorTelemetryDescriptor;
    private onWillDisposeEditor;
    private handleDisposedEditors;
    private onDidChangeEditorPartOptions;
    private onDidChangeEditorDirty;
    private onDidChangeEditorLabel;
    private onDidVisibilityChange;
    get index(): number;
    get label(): string;
    get ariaLabel(): string;
    private _disposed;
    get disposed(): boolean;
    get isEmpty(): boolean;
    get titleHeight(): IEditorGroupTitleHeight;
    notifyIndexChanged(newIndex: number): void;
    setActive(isActive: boolean): void;
    get id(): GroupIdentifier;
    get editors(): EditorInput[];
    get count(): number;
    get stickyCount(): number;
    get activeEditorPane(): IVisibleEditorPane | undefined;
    get activeEditor(): EditorInput | null;
    get previewEditor(): EditorInput | null;
    isPinned(editorOrIndex: EditorInput | number): boolean;
    isSticky(editorOrIndex: EditorInput | number): boolean;
    isActive(editor: EditorInput | IUntypedEditorInput): boolean;
    contains(candidate: EditorInput | IUntypedEditorInput, options?: IMatchEditorOptions): boolean;
    getEditors(order: EditorsOrder, options?: {
        excludeSticky?: boolean;
    }): EditorInput[];
    findEditors(resource: URI, options?: IFindEditorOptions): EditorInput[];
    getEditorByIndex(index: number): EditorInput | undefined;
    getIndexOfEditor(editor: EditorInput): number;
    isFirst(editor: EditorInput): boolean;
    isLast(editor: EditorInput): boolean;
    focus(): void;
    pinEditor(candidate?: EditorInput | undefined): void;
    stickEditor(candidate?: EditorInput | undefined): void;
    unstickEditor(candidate?: EditorInput | undefined): void;
    private doStickEditor;
    openEditor(editor: EditorInput, options?: IEditorOptions): Promise<IEditorPane | undefined>;
    private doOpenEditor;
    private doShowEditor;
    openEditors(editors: {
        editor: EditorInput;
        options?: IEditorOptions;
    }[]): Promise<IEditorPane | undefined>;
    moveEditors(editors: {
        editor: EditorInput;
        options?: IEditorOptions;
    }[], target: EditorGroupView): void;
    moveEditor(editor: EditorInput, target: EditorGroupView, options?: IEditorOptions, internalOptions?: IInternalEditorTitleControlOptions): void;
    private doMoveEditorInsideGroup;
    private doMoveOrCopyEditorAcrossGroups;
    copyEditors(editors: {
        editor: EditorInput;
        options?: IEditorOptions;
    }[], target: EditorGroupView): void;
    copyEditor(editor: EditorInput, target: EditorGroupView, options?: IEditorOptions, internalOptions?: IInternalEditorTitleControlOptions): void;
    closeEditor(editor?: EditorInput | undefined, options?: ICloseEditorOptions): Promise<boolean>;
    private doCloseEditorWithConfirmationHandling;
    private doCloseEditor;
    private doCloseActiveEditor;
    private shouldRestoreFocus;
    private doCloseInactiveEditor;
    private handleCloseConfirmation;
    private doHandleCloseConfirmation;
    private shouldConfirmClose;
    closeEditors(args: EditorInput[] | ICloseEditorsFilter, options?: ICloseEditorOptions): Promise<boolean>;
    private doGetEditorsToClose;
    private doCloseEditors;
    closeAllEditors(options?: ICloseAllEditorsOptions): Promise<boolean>;
    private doCloseAllEditors;
    replaceEditors(editors: EditorReplacement[]): Promise<void>;
    get isLocked(): boolean;
    lock(locked: boolean): void;
    protected updateStyles(): void;
    readonly element: HTMLElement;
    get minimumWidth(): number;
    get minimumHeight(): number;
    get maximumWidth(): number;
    get maximumHeight(): number;
    private _onDidChange;
    readonly onDidChange: import("vs/base/common/event").Event<{
        width: number;
        height: number;
    } | undefined>;
    layout(width: number, height: number, top: number, left: number): void;
    relayout(): void;
    toJSON(): ISerializedEditorGroupModel;
    dispose(): void;
}
export interface EditorReplacement extends IEditorReplacement {
    readonly editor: EditorInput;
    readonly replacement: EditorInput;
    readonly options?: IEditorOptions;
}

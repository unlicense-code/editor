import { VSBuffer } from 'vs/base/common/buffer';
import { CancellationToken } from 'vs/base/common/cancellation';
import { Event } from 'vs/base/common/event';
import { URI, UriComponents } from 'vs/base/common/uri';
import { IExtensionDescription } from 'vs/platform/extensions/common/extensions';
import { ExtHostNotebookShape, IMainContext, INotebookCellStatusBarListDto, INotebookDocumentsAndEditorsDelta, NotebookDataDto } from 'vs/workbench/api/common/extHost.protocol';
import { ExtHostCommands } from 'vs/workbench/api/common/extHostCommands';
import { ExtHostDocuments } from 'vs/workbench/api/common/extHostDocuments';
import { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';
import * as extHostTypes from 'vs/workbench/api/common/extHostTypes';
import { SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';
import type * as vscode from 'vscode';
import { ExtHostNotebookDocument } from './extHostNotebookDocument';
import { ExtHostNotebookEditor } from './extHostNotebookEditor';
export declare class ExtHostNotebookController implements ExtHostNotebookShape {
    private _textDocumentsAndEditors;
    private _textDocuments;
    private static _notebookStatusBarItemProviderHandlePool;
    private readonly _notebookProxy;
    private readonly _notebookDocumentsProxy;
    private readonly _notebookEditorsProxy;
    private readonly _notebookStatusBarItemProviders;
    private readonly _documents;
    private readonly _editors;
    private readonly _commandsConverter;
    private readonly _onDidChangeActiveNotebookEditor;
    readonly onDidChangeActiveNotebookEditor: Event<vscode.NotebookEditor | undefined>;
    private _activeNotebookEditor;
    get activeNotebookEditor(): vscode.NotebookEditor | undefined;
    private _visibleNotebookEditors;
    get visibleNotebookEditors(): vscode.NotebookEditor[];
    private _onDidOpenNotebookDocument;
    onDidOpenNotebookDocument: Event<vscode.NotebookDocument>;
    private _onDidCloseNotebookDocument;
    onDidCloseNotebookDocument: Event<vscode.NotebookDocument>;
    private _onDidChangeVisibleNotebookEditors;
    onDidChangeVisibleNotebookEditors: Event<vscode.NotebookEditor[]>;
    private _statusBarCache;
    constructor(mainContext: IMainContext, commands: ExtHostCommands, _textDocumentsAndEditors: ExtHostDocumentsAndEditors, _textDocuments: ExtHostDocuments);
    getEditorById(editorId: string): ExtHostNotebookEditor;
    getIdByEditor(editor: vscode.NotebookEditor): string | undefined;
    get notebookDocuments(): ExtHostNotebookDocument[];
    getNotebookDocument(uri: URI, relaxed: true): ExtHostNotebookDocument | undefined;
    getNotebookDocument(uri: URI): ExtHostNotebookDocument;
    private static _convertNotebookRegistrationData;
    registerNotebookCellStatusBarItemProvider(extension: IExtensionDescription, notebookType: string, provider: vscode.NotebookCellStatusBarItemProvider): extHostTypes.Disposable;
    createNotebookDocument(options: {
        viewType: string;
        content?: vscode.NotebookData;
    }): Promise<URI>;
    openNotebookDocument(uri: URI): Promise<vscode.NotebookDocument>;
    showNotebookDocument(notebookOrUri: vscode.NotebookDocument | URI, options?: vscode.NotebookDocumentShowOptions): Promise<vscode.NotebookEditor>;
    $provideNotebookCellStatusBarItems(handle: number, uri: UriComponents, index: number, token: CancellationToken): Promise<INotebookCellStatusBarListDto | undefined>;
    $releaseNotebookCellStatusBarItems(cacheId: number): void;
    private _handlePool;
    private readonly _notebookSerializer;
    registerNotebookSerializer(extension: IExtensionDescription, viewType: string, serializer: vscode.NotebookSerializer, options?: vscode.NotebookDocumentContentOptions, registration?: vscode.NotebookRegistrationData): vscode.Disposable;
    $dataToNotebook(handle: number, bytes: VSBuffer, token: CancellationToken): Promise<SerializableObjectWithBuffers<NotebookDataDto>>;
    $notebookToData(handle: number, data: SerializableObjectWithBuffers<NotebookDataDto>, token: CancellationToken): Promise<VSBuffer>;
    private _createExtHostEditor;
    $acceptDocumentAndEditorsDelta(delta: SerializableObjectWithBuffers<INotebookDocumentsAndEditorsDelta>): void;
    private static _registerApiCommands;
}

import { CancellationToken } from 'vs/base/common/cancellation';
import { Event } from 'vs/base/common/event';
import { URI, UriComponents } from 'vs/base/common/uri';
import { IExtensionDescription } from 'vs/platform/extensions/common/extensions';
import { ISignService } from 'vs/platform/sign/common/sign';
import { DebugSessionUUID, ExtHostDebugServiceShape, IBreakpointsDeltaDto, IDebugSessionDto, MainThreadDebugServiceShape } from 'vs/workbench/api/common/extHost.protocol';
import { IExtHostEditorTabs } from 'vs/workbench/api/common/extHostEditorTabs';
import { IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';
import { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';
import { DebugAdapterExecutable } from 'vs/workbench/api/common/extHostTypes';
import { IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';
import { AbstractDebugAdapter } from 'vs/workbench/contrib/debug/common/abstractDebugAdapter';
import { IAdapterDescriptor, IConfig } from 'vs/workbench/contrib/debug/common/debug';
import { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';
import { Dto } from 'vs/workbench/services/extensions/common/proxyIdentifier';
import type * as vscode from 'vscode';
import { IExtHostConfiguration } from '../common/extHostConfiguration';
import { IExtHostVariableResolverProvider } from './extHostVariableResolverService';
export declare const IExtHostDebugService: import("vs/platform/instantiation/common/instantiation").ServiceIdentifier<IExtHostDebugService>;
export interface IExtHostDebugService extends ExtHostDebugServiceShape {
    readonly _serviceBrand: undefined;
    onDidStartDebugSession: Event<vscode.DebugSession>;
    onDidTerminateDebugSession: Event<vscode.DebugSession>;
    onDidChangeActiveDebugSession: Event<vscode.DebugSession | undefined>;
    activeDebugSession: vscode.DebugSession | undefined;
    activeDebugConsole: vscode.DebugConsole;
    onDidReceiveDebugSessionCustomEvent: Event<vscode.DebugSessionCustomEvent>;
    onDidChangeBreakpoints: Event<vscode.BreakpointsChangeEvent>;
    breakpoints: vscode.Breakpoint[];
    addBreakpoints(breakpoints0: readonly vscode.Breakpoint[]): Promise<void>;
    removeBreakpoints(breakpoints0: readonly vscode.Breakpoint[]): Promise<void>;
    startDebugging(folder: vscode.WorkspaceFolder | undefined, nameOrConfig: string | vscode.DebugConfiguration, options: vscode.DebugSessionOptions): Promise<boolean>;
    stopDebugging(session?: vscode.DebugSession): Promise<void>;
    registerDebugConfigurationProvider(type: string, provider: vscode.DebugConfigurationProvider, trigger: vscode.DebugConfigurationProviderTriggerKind): vscode.Disposable;
    registerDebugAdapterDescriptorFactory(extension: IExtensionDescription, type: string, factory: vscode.DebugAdapterDescriptorFactory): vscode.Disposable;
    registerDebugAdapterTrackerFactory(type: string, factory: vscode.DebugAdapterTrackerFactory): vscode.Disposable;
    asDebugSourceUri(source: vscode.DebugProtocolSource, session?: vscode.DebugSession): vscode.Uri;
}
export declare abstract class ExtHostDebugServiceBase implements IExtHostDebugService, ExtHostDebugServiceShape {
    protected _workspaceService: IExtHostWorkspace;
    private _extensionService;
    protected _configurationService: IExtHostConfiguration;
    protected _editorTabs: IExtHostEditorTabs;
    private _variableResolver;
    readonly _serviceBrand: undefined;
    private _configProviderHandleCounter;
    private _configProviders;
    private _adapterFactoryHandleCounter;
    private _adapterFactories;
    private _trackerFactoryHandleCounter;
    private _trackerFactories;
    private _debugServiceProxy;
    private _debugSessions;
    private readonly _onDidStartDebugSession;
    get onDidStartDebugSession(): Event<vscode.DebugSession>;
    private readonly _onDidTerminateDebugSession;
    get onDidTerminateDebugSession(): Event<vscode.DebugSession>;
    private readonly _onDidChangeActiveDebugSession;
    get onDidChangeActiveDebugSession(): Event<vscode.DebugSession | undefined>;
    private _activeDebugSession;
    get activeDebugSession(): ExtHostDebugSession | undefined;
    private readonly _onDidReceiveDebugSessionCustomEvent;
    get onDidReceiveDebugSessionCustomEvent(): Event<vscode.DebugSessionCustomEvent>;
    private _activeDebugConsole;
    get activeDebugConsole(): vscode.DebugConsole;
    private _breakpoints;
    private _breakpointEventsActive;
    private readonly _onDidChangeBreakpoints;
    private _debugAdapters;
    private _debugAdaptersTrackers;
    private _signService;
    constructor(extHostRpcService: IExtHostRpcService, _workspaceService: IExtHostWorkspace, _extensionService: IExtHostExtensionService, _configurationService: IExtHostConfiguration, _editorTabs: IExtHostEditorTabs, _variableResolver: IExtHostVariableResolverProvider);
    asDebugSourceUri(src: vscode.DebugProtocolSource, session?: vscode.DebugSession): URI;
    private registerAllDebugTypes;
    get onDidChangeBreakpoints(): Event<vscode.BreakpointsChangeEvent>;
    get breakpoints(): vscode.Breakpoint[];
    addBreakpoints(breakpoints0: vscode.Breakpoint[]): Promise<void>;
    removeBreakpoints(breakpoints0: vscode.Breakpoint[]): Promise<void>;
    startDebugging(folder: vscode.WorkspaceFolder | undefined, nameOrConfig: string | vscode.DebugConfiguration, options: vscode.DebugSessionOptions): Promise<boolean>;
    stopDebugging(session?: vscode.DebugSession): Promise<void>;
    registerDebugConfigurationProvider(type: string, provider: vscode.DebugConfigurationProvider, trigger: vscode.DebugConfigurationProviderTriggerKind): vscode.Disposable;
    registerDebugAdapterDescriptorFactory(extension: IExtensionDescription, type: string, factory: vscode.DebugAdapterDescriptorFactory): vscode.Disposable;
    registerDebugAdapterTrackerFactory(type: string, factory: vscode.DebugAdapterTrackerFactory): vscode.Disposable;
    $runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined>;
    $substituteVariables(folderUri: UriComponents | undefined, config: IConfig): Promise<IConfig>;
    protected createDebugAdapter(adapter: IAdapterDescriptor, session: ExtHostDebugSession): AbstractDebugAdapter | undefined;
    protected createSignService(): ISignService | undefined;
    $startDASession(debugAdapterHandle: number, sessionDto: IDebugSessionDto): Promise<void>;
    $sendDAMessage(debugAdapterHandle: number, message: DebugProtocol.ProtocolMessage): void;
    $stopDASession(debugAdapterHandle: number): Promise<void>;
    $acceptBreakpointsDelta(delta: IBreakpointsDeltaDto): void;
    $provideDebugConfigurations(configProviderHandle: number, folderUri: UriComponents | undefined, token: CancellationToken): Promise<vscode.DebugConfiguration[]>;
    $resolveDebugConfiguration(configProviderHandle: number, folderUri: UriComponents | undefined, debugConfiguration: vscode.DebugConfiguration, token: CancellationToken): Promise<vscode.DebugConfiguration | null | undefined>;
    $resolveDebugConfigurationWithSubstitutedVariables(configProviderHandle: number, folderUri: UriComponents | undefined, debugConfiguration: vscode.DebugConfiguration, token: CancellationToken): Promise<vscode.DebugConfiguration | null | undefined>;
    $provideDebugAdapter(adapterFactoryHandle: number, sessionDto: IDebugSessionDto): Promise<Dto<IAdapterDescriptor>>;
    $acceptDebugSessionStarted(sessionDto: IDebugSessionDto): Promise<void>;
    $acceptDebugSessionTerminated(sessionDto: IDebugSessionDto): Promise<void>;
    $acceptDebugSessionActiveChanged(sessionDto: IDebugSessionDto | undefined): Promise<void>;
    $acceptDebugSessionNameChanged(sessionDto: IDebugSessionDto, name: string): Promise<void>;
    $acceptDebugSessionCustomEvent(sessionDto: IDebugSessionDto, event: any): Promise<void>;
    private convertToDto;
    private getAdapterDescriptorFactoryByType;
    private getAdapterDescriptorFactoryByHandle;
    private getConfigProviderByHandle;
    private definesDebugType;
    private getDebugAdapterTrackers;
    private getAdapterDescriptor;
    protected daExecutableFromPackage(session: ExtHostDebugSession, extensionRegistry: ExtensionDescriptionRegistry): DebugAdapterExecutable | undefined;
    private startBreakpoints;
    private fireBreakpointChanges;
    private getSession;
    private getFolder;
}
export declare class ExtHostDebugSession implements vscode.DebugSession {
    private _debugServiceProxy;
    private _id;
    private _type;
    private _name;
    private _workspaceFolder;
    private _configuration;
    private _parentSession;
    constructor(_debugServiceProxy: MainThreadDebugServiceShape, _id: DebugSessionUUID, _type: string, _name: string, _workspaceFolder: vscode.WorkspaceFolder | undefined, _configuration: vscode.DebugConfiguration, _parentSession: vscode.DebugSession | undefined);
    get id(): string;
    get type(): string;
    get name(): string;
    set name(name: string);
    get parentSession(): vscode.DebugSession | undefined;
    _acceptNameChanged(name: string): void;
    get workspaceFolder(): vscode.WorkspaceFolder | undefined;
    get configuration(): vscode.DebugConfiguration;
    customRequest(command: string, args: any): Promise<any>;
    getDebugProtocolBreakpoint(breakpoint: vscode.Breakpoint): Promise<vscode.DebugProtocolBreakpoint | undefined>;
}
export declare class ExtHostDebugConsole {
    readonly value: vscode.DebugConsole;
    constructor(proxy: MainThreadDebugServiceShape);
}
export declare class WorkerExtHostDebugService extends ExtHostDebugServiceBase {
    constructor(extHostRpcService: IExtHostRpcService, workspaceService: IExtHostWorkspace, extensionService: IExtHostExtensionService, configurationService: IExtHostConfiguration, editorTabs: IExtHostEditorTabs, variableResolver: IExtHostVariableResolverProvider);
}

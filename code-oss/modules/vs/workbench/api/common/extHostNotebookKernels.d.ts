import { CancellationToken } from 'vs/base/common/cancellation';
import { UriComponents } from 'vs/base/common/uri';
import { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';
import { ILogService } from 'vs/platform/log/common/log';
import { ExtHostNotebookKernelsShape, IMainContext } from 'vs/workbench/api/common/extHost.protocol';
import { ExtHostCommands } from 'vs/workbench/api/common/extHostCommands';
import { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';
import { ExtHostNotebookController } from 'vs/workbench/api/common/extHostNotebook';
import { INotebookKernelSourceAction, NotebookCellExecutionState } from 'vs/workbench/contrib/notebook/common/notebookCommon';
import * as vscode from 'vscode';
export declare class ExtHostNotebookKernels implements ExtHostNotebookKernelsShape {
    private readonly _initData;
    private readonly _extHostNotebook;
    private _commands;
    private readonly _logService;
    private readonly _proxy;
    private readonly _activeExecutions;
    private _kernelDetectionTask;
    private _kernelDetectionTaskHandlePool;
    private _kernelSourceActionProviders;
    private _kernelSourceActionProviderHandlePool;
    private _kernelSourceActionProviderCache;
    private readonly _kernelData;
    private _handlePool;
    private readonly _onDidChangeCellExecutionState;
    readonly onDidChangeNotebookCellExecutionState: import("vs/base/common/event").Event<vscode.NotebookCellExecutionStateChangeEvent>;
    constructor(mainContext: IMainContext, _initData: IExtHostInitDataService, _extHostNotebook: ExtHostNotebookController, _commands: ExtHostCommands, _logService: ILogService);
    createNotebookController(extension: IExtensionDescription, id: string, viewType: string, label: string, handler?: (cells: vscode.NotebookCell[], notebook: vscode.NotebookDocument, controller: vscode.NotebookController) => void | Thenable<void>, preloads?: vscode.NotebookRendererScript[]): vscode.NotebookController;
    getIdByController(controller: vscode.NotebookController): string | null;
    createNotebookControllerDetectionTask(extension: IExtensionDescription, viewType: string): vscode.NotebookControllerDetectionTask;
    registerKernelSourceActionProvider(extension: IExtensionDescription, viewType: string, provider: vscode.NotebookKernelSourceActionProvider): {
        dispose: () => void;
    };
    $provideKernelSourceActions(handle: number, token: CancellationToken): Promise<INotebookKernelSourceAction[]>;
    $acceptNotebookAssociation(handle: number, uri: UriComponents, value: boolean): void;
    $executeCells(handle: number, uri: UriComponents, handles: number[]): Promise<void>;
    $cancelCells(handle: number, uri: UriComponents, handles: number[]): Promise<void>;
    $acceptKernelMessageFromRenderer(handle: number, editorId: string, message: any): void;
    $cellExecutionChanged(uri: UriComponents, cellHandle: number, state: NotebookCellExecutionState | undefined): void;
    _createNotebookCellExecution(cell: vscode.NotebookCell, controllerId: string): vscode.NotebookCellExecution;
}
export declare function createKernelId(extensionIdentifier: ExtensionIdentifier, id: string): string;

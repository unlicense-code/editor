import { Keybinding, ResolvedKeybinding } from 'vs/base/common/keybindings';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { AbstractKeybindingService } from 'vs/platform/keybinding/common/abstractKeybindingService';
import { IKeyboardEvent, KeybindingsSchemaContribution } from 'vs/platform/keybinding/common/keybinding';
import { KeybindingResolver } from 'vs/platform/keybinding/common/keybindingResolver';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IHostService } from 'vs/workbench/services/host/browser/host';
import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
import { IFileService } from 'vs/platform/files/common/files';
import { IKeyboardLayoutService } from 'vs/platform/keyboardLayout/common/keyboardLayout';
import { ILogService } from 'vs/platform/log/common/log';
import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
export declare class WorkbenchKeybindingService extends AbstractKeybindingService {
    private readonly hostService;
    private readonly keyboardLayoutService;
    private _keyboardMapper;
    private _cachedResolver;
    private userKeybindings;
    private isComposingGlobalContextKey;
    private readonly _contributions;
    constructor(contextKeyService: IContextKeyService, commandService: ICommandService, telemetryService: ITelemetryService, notificationService: INotificationService, userDataProfileService: IUserDataProfileService, configurationService: IConfigurationService, hostService: IHostService, extensionService: IExtensionService, fileService: IFileService, logService: ILogService, keyboardLayoutService: IKeyboardLayoutService);
    registerSchemaContribution(contribution: KeybindingsSchemaContribution): void;
    private updateSchema;
    private _printUserBinding;
    private _printResolvedKeybinding;
    private _printResolvedKeybindings;
    private _dumpResolveKeybindingDebugInfo;
    _dumpDebugInfo(): string;
    _dumpDebugInfoJSON(): string;
    customKeybindingsCount(): number;
    private updateResolver;
    protected _getResolver(): KeybindingResolver;
    protected _documentHasFocus(): boolean;
    private _resolveKeybindingItems;
    private _resolveUserKeybindingItems;
    private _assertBrowserConflicts;
    resolveKeybinding(kb: Keybinding): ResolvedKeybinding[];
    resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;
    resolveUserBinding(userBinding: string): ResolvedKeybinding[];
    private _handleKeybindingsExtensionPointUser;
    private _handleKeybinding;
    private static bindToCurrentPlatform;
    private _asCommandRule;
    getDefaultKeybindingsContent(): string;
    private static _getDefaultKeybindings;
    private static _getAllCommandsAsComment;
    mightProducePrintableCharacter(event: IKeyboardEvent): boolean;
}

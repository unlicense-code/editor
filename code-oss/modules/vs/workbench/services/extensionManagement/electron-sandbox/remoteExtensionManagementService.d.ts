import { IChannel } from 'vs/base/parts/ipc/common/ipc';
import { Event } from 'vs/base/common/event';
import { ILocalExtension, IGalleryExtension, IExtensionGalleryService, InstallOptions, InstallVSIXOptions, UninstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
import { URI } from 'vs/base/common/uri';
import { ExtensionType } from 'vs/platform/extensions/common/extensions';
import { ILogService } from 'vs/platform/log/common/log';
import { IProductService } from 'vs/platform/product/common/productService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IExtensionManagementServer, IProfileAwareExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
import { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';
import { ExtensionManagementChannelClient } from 'vs/platform/extensionManagement/common/extensionManagementIpc';
import { IFileService } from 'vs/platform/files/common/files';
export declare class NativeRemoteExtensionManagementService extends ExtensionManagementChannelClient implements IProfileAwareExtensionManagementService {
    private readonly localExtensionManagementServer;
    private readonly logService;
    private readonly galleryService;
    private readonly configurationService;
    private readonly productService;
    private readonly fileService;
    private readonly extensionManifestPropertiesService;
    readonly onDidChangeProfile: Event<any>;
    get onProfileAwareInstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").InstallExtensionEvent>;
    get onProfileAwareDidInstallExtensions(): Event<readonly import("vs/platform/extensionManagement/common/extensionManagement").InstallExtensionResult[]>;
    get onProfileAwareUninstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").UninstallExtensionEvent>;
    get onProfileAwareDidUninstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").DidUninstallExtensionEvent>;
    constructor(channel: IChannel, localExtensionManagementServer: IExtensionManagementServer, logService: ILogService, galleryService: IExtensionGalleryService, configurationService: IConfigurationService, productService: IProductService, fileService: IFileService, extensionManifestPropertiesService: IExtensionManifestPropertiesService);
    getInstalled(type?: ExtensionType | null, profileLocation?: URI): Promise<ILocalExtension[]>;
    uninstall(extension: ILocalExtension, options?: UninstallOptions): Promise<void>;
    install(vsix: URI, options?: InstallVSIXOptions): Promise<ILocalExtension>;
    installFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;
    private doInstallFromGallery;
    private downloadAndInstall;
    private downloadCompatibleAndInstall;
    private checkAndGetCompatible;
    private installUIDependenciesAndPackedExtensions;
    private getAllUIDependenciesAndPackedExtensions;
    private getAllWorkspaceDependenciesAndPackedExtensions;
    private getDependenciesAndPackedExtensionsRecursively;
}

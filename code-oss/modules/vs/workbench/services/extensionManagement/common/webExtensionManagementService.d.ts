import { ExtensionType, IExtensionIdentifier, IExtensionManifest, TargetPlatform } from 'vs/platform/extensions/common/extensions';
import { ILocalExtension, IGalleryExtension, IGalleryMetadata, IExtensionGalleryService, Metadata, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
import { URI } from 'vs/base/common/uri';
import { Event } from 'vs/base/common/event';
import { IProfileAwareExtensionManagementService, IWebExtensionsScannerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
import { ILogService } from 'vs/platform/log/common/log';
import { AbstractExtensionManagementService, IInstallExtensionTask, InstallExtensionTaskOptions, IUninstallExtensionTask, UninstallExtensionTaskOptions } from 'vs/platform/extensionManagement/common/abstractExtensionManagementService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';
import { IProductService } from 'vs/platform/product/common/productService';
import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
import { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';
import { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';
export declare class WebExtensionManagementService extends AbstractExtensionManagementService implements IProfileAwareExtensionManagementService {
    private readonly webExtensionsScannerService;
    private readonly extensionManifestPropertiesService;
    private readonly userDataProfileService;
    private readonly uriIdentityService;
    readonly _serviceBrand: undefined;
    private readonly disposables;
    get onProfileAwareInstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").InstallExtensionEvent>;
    get onInstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").InstallExtensionEvent>;
    get onProfileAwareDidInstallExtensions(): Event<import("vs/platform/extensionManagement/common/extensionManagement").InstallExtensionResult[]>;
    get onDidInstallExtensions(): Event<import("vs/platform/extensionManagement/common/extensionManagement").InstallExtensionResult[]>;
    get onProfileAwareUninstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").UninstallExtensionEvent>;
    get onUninstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").UninstallExtensionEvent>;
    get onProfileAwareDidUninstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").DidUninstallExtensionEvent>;
    get onDidUninstallExtension(): Event<import("vs/platform/extensionManagement/common/extensionManagement").DidUninstallExtensionEvent>;
    private readonly _onDidChangeProfile;
    readonly onDidChangeProfile: Event<{
        readonly added: ILocalExtension[];
        readonly removed: ILocalExtension[];
    }>;
    constructor(extensionGalleryService: IExtensionGalleryService, telemetryService: ITelemetryService, logService: ILogService, webExtensionsScannerService: IWebExtensionsScannerService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, userDataProfileService: IUserDataProfileService, productService: IProductService, userDataProfilesService: IUserDataProfilesService, uriIdentityService: IUriIdentityService);
    private filterEvent;
    getTargetPlatform(): Promise<TargetPlatform>;
    canInstall(gallery: IGalleryExtension): Promise<boolean>;
    getInstalled(type?: ExtensionType, profileLocation?: URI): Promise<ILocalExtension[]>;
    install(location: URI, options?: InstallOptions): Promise<ILocalExtension>;
    getMetadata(extension: ILocalExtension): Promise<Metadata | undefined>;
    protected getCompatibleVersion(extension: IGalleryExtension, sameVersion: boolean, includePreRelease: boolean): Promise<IGalleryExtension | null>;
    private isConfiguredToExecuteOnWeb;
    updateMetadata(local: ILocalExtension, metadata: IGalleryMetadata): Promise<ILocalExtension>;
    protected getCurrentExtensionsManifestLocation(): URI;
    protected createInstallExtensionTask(manifest: IExtensionManifest, extension: URI | IGalleryExtension, options: InstallExtensionTaskOptions): IInstallExtensionTask;
    protected createUninstallExtensionTask(extension: ILocalExtension, options: UninstallExtensionTaskOptions): IUninstallExtensionTask;
    zip(extension: ILocalExtension): Promise<URI>;
    unzip(zipLocation: URI): Promise<IExtensionIdentifier>;
    getManifest(vsix: URI): Promise<IExtensionManifest>;
    updateExtensionScope(): Promise<ILocalExtension>;
    download(): Promise<URI>;
    reinstallFromGallery(): Promise<void>;
    private whenProfileChanged;
}

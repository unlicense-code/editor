import { Event } from 'vs/base/common/event';
import { ILocalExtension, IGalleryExtension, IExtensionIdentifier, IExtensionsControlManifest, IGalleryMetadata, IExtensionGalleryService, InstallOptions, UninstallOptions, InstallVSIXOptions, InstallExtensionResult, Metadata, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';
import { DidChangeProfileForServerEvent, DidUninstallExtensionOnServerEvent, IExtensionManagementServer, IExtensionManagementServerService, InstallExtensionOnServerEvent, IWorkbenchExtensionManagementService, UninstallExtensionOnServerEvent } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
import { ExtensionType, IExtensionManifest, TargetPlatform } from 'vs/platform/extensions/common/extensions';
import { URI } from 'vs/base/common/uri';
import { Disposable } from 'vs/base/common/lifecycle';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IProductService } from 'vs/platform/product/common/productService';
import { IDownloadService } from 'vs/platform/download/common/download';
import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
import { IUserDataSyncEnablementService } from 'vs/platform/userDataSync/common/userDataSync';
import { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';
import { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IFileService } from 'vs/platform/files/common/files';
import { ILogService } from 'vs/platform/log/common/log';
export declare class ExtensionManagementService extends Disposable implements IWorkbenchExtensionManagementService {
    protected readonly extensionManagementServerService: IExtensionManagementServerService;
    private readonly extensionGalleryService;
    protected readonly configurationService: IConfigurationService;
    protected readonly productService: IProductService;
    protected readonly downloadService: IDownloadService;
    private readonly userDataSyncEnablementService;
    private readonly dialogService;
    private readonly workspaceTrustRequestService;
    private readonly extensionManifestPropertiesService;
    private readonly fileService;
    private readonly logService;
    private readonly instantiationService;
    readonly _serviceBrand: undefined;
    readonly onInstallExtension: Event<InstallExtensionOnServerEvent>;
    readonly onDidInstallExtensions: Event<readonly InstallExtensionResult[]>;
    readonly onUninstallExtension: Event<UninstallExtensionOnServerEvent>;
    readonly onDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;
    readonly onProfileAwareInstallExtension: Event<InstallExtensionOnServerEvent>;
    readonly onProfileAwareDidInstallExtensions: Event<readonly InstallExtensionResult[]>;
    readonly onProfileAwareUninstallExtension: Event<UninstallExtensionOnServerEvent>;
    readonly onProfileAwareDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;
    readonly onDidChangeProfile: Event<DidChangeProfileForServerEvent>;
    protected readonly servers: IExtensionManagementServer[];
    constructor(extensionManagementServerService: IExtensionManagementServerService, extensionGalleryService: IExtensionGalleryService, configurationService: IConfigurationService, productService: IProductService, downloadService: IDownloadService, userDataSyncEnablementService: IUserDataSyncEnablementService, dialogService: IDialogService, workspaceTrustRequestService: IWorkspaceTrustRequestService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, fileService: IFileService, logService: ILogService, instantiationService: IInstantiationService);
    getInstalled(type?: ExtensionType, profileLocation?: URI): Promise<ILocalExtension[]>;
    uninstall(extension: ILocalExtension, options?: UninstallOptions): Promise<void>;
    private uninstallEverywhere;
    private uninstallInServer;
    private getDependentsErrorMessage;
    reinstallFromGallery(extension: ILocalExtension): Promise<void>;
    updateMetadata(extension: ILocalExtension, metadata: IGalleryMetadata): Promise<ILocalExtension>;
    updateExtensionScope(extension: ILocalExtension, isMachineScoped: boolean): Promise<ILocalExtension>;
    zip(extension: ILocalExtension): Promise<URI>;
    unzip(zipLocation: URI): Promise<IExtensionIdentifier>;
    download(extension: IGalleryExtension, operation: InstallOperation): Promise<URI>;
    install(vsix: URI, options?: InstallVSIXOptions): Promise<ILocalExtension>;
    installVSIX(vsix: URI, manifest: IExtensionManifest, options?: InstallVSIXOptions): Promise<ILocalExtension>;
    private getServersToInstall;
    installWebExtension(location: URI): Promise<ILocalExtension>;
    protected installVSIXInServer(vsix: URI, server: IExtensionManagementServer, options: InstallVSIXOptions | undefined): Promise<ILocalExtension>;
    getManifest(vsix: URI): Promise<IExtensionManifest>;
    canInstall(gallery: IGalleryExtension): Promise<boolean>;
    updateFromGallery(gallery: IGalleryExtension, extension: ILocalExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;
    installExtensions(extensions: IGalleryExtension[], installOptions?: InstallOptions): Promise<ILocalExtension[]>;
    installFromGallery(gallery: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;
    getExtensionManagementServerToInstall(manifest: IExtensionManifest): IExtensionManagementServer | null;
    private isExtensionsSyncEnabled;
    private hasToFlagExtensionsMachineScoped;
    getExtensionsControlManifest(): Promise<IExtensionsControlManifest>;
    private getServer;
    protected checkForWorkspaceTrust(manifest: IExtensionManifest): Promise<void>;
    private checkInstallingExtensionOnWeb;
    private _targetPlatformPromise;
    getTargetPlatform(): Promise<TargetPlatform>;
    getMetadata(extension: ILocalExtension): Promise<Metadata | undefined>;
    registerParticipant(): void;
}

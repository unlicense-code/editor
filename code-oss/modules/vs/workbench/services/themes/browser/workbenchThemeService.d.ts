import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
import { IWorkbenchThemeService, IWorkbenchColorTheme, IWorkbenchFileIconTheme, IWorkbenchProductIconTheme, ThemeSettingTarget } from 'vs/workbench/services/themes/common/workbenchThemeService';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { Event } from 'vs/base/common/event';
import { FileIconThemeData } from 'vs/workbench/services/themes/browser/fileIconThemeData';
import { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';
import { IFileService } from 'vs/platform/files/common/files';
import { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';
import { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';
import { ProductIconThemeData } from 'vs/workbench/services/themes/browser/productIconThemeData';
import { ILogService } from 'vs/platform/log/common/log';
import { IHostColorSchemeService } from 'vs/workbench/services/themes/common/hostColorSchemeService';
import { IUserDataInitializationService } from 'vs/workbench/services/userData/browser/userDataInit';
import { ILanguageService } from 'vs/editor/common/languages/language';
export declare class WorkbenchThemeService implements IWorkbenchThemeService {
    private readonly storageService;
    private readonly configurationService;
    private readonly telemetryService;
    readonly environmentService: IBrowserWorkbenchEnvironmentService;
    private readonly extensionResourceLoaderService;
    readonly layoutService: IWorkbenchLayoutService;
    private readonly logService;
    private readonly hostColorService;
    readonly userDataInitializationService: IUserDataInitializationService;
    readonly languageService: ILanguageService;
    readonly _serviceBrand: undefined;
    private readonly container;
    private settings;
    private readonly colorThemeRegistry;
    private currentColorTheme;
    private readonly onColorThemeChange;
    private readonly colorThemeWatcher;
    private colorThemingParticipantChangeListener;
    private readonly colorThemeSequencer;
    private readonly fileIconThemeRegistry;
    private currentFileIconTheme;
    private readonly onFileIconThemeChange;
    private readonly fileIconThemeLoader;
    private readonly fileIconThemeWatcher;
    private readonly fileIconThemeSequencer;
    private readonly productIconThemeRegistry;
    private currentProductIconTheme;
    private readonly onProductIconThemeChange;
    private readonly productIconThemeWatcher;
    private readonly productIconThemeSequencer;
    private themeSettingIdBeforeSchemeSwitch;
    constructor(extensionService: IExtensionService, storageService: IStorageService, configurationService: IConfigurationService, telemetryService: ITelemetryService, environmentService: IBrowserWorkbenchEnvironmentService, fileService: IFileService, extensionResourceLoaderService: IExtensionResourceLoaderService, layoutService: IWorkbenchLayoutService, logService: ILogService, hostColorService: IHostColorSchemeService, userDataInitializationService: IUserDataInitializationService, languageService: ILanguageService);
    private initialize;
    private installConfigurationListener;
    private installRegistryListeners;
    private installPreferredSchemeListener;
    private handlePreferredSchemeUpdated;
    private getPreferredColorScheme;
    private applyPreferredColorTheme;
    getColorTheme(): IWorkbenchColorTheme;
    getColorThemes(): Promise<IWorkbenchColorTheme[]>;
    getMarketplaceColorThemes(publisher: string, name: string, version: string): Promise<IWorkbenchColorTheme[]>;
    get onDidColorThemeChange(): Event<IWorkbenchColorTheme>;
    setColorTheme(themeIdOrTheme: string | undefined | IWorkbenchColorTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchColorTheme | null>;
    private internalSetColorTheme;
    private reloadCurrentColorTheme;
    restoreColorTheme(): Promise<boolean>;
    private updateDynamicCSSRules;
    private applyTheme;
    private themeExtensionsActivated;
    private sendTelemetry;
    getFileIconThemes(): Promise<IWorkbenchFileIconTheme[]>;
    getFileIconTheme(): FileIconThemeData;
    get onDidFileIconThemeChange(): Event<IWorkbenchFileIconTheme>;
    setFileIconTheme(iconThemeOrId: string | undefined | IWorkbenchFileIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchFileIconTheme>;
    private internalSetFileIconTheme;
    getMarketplaceFileIconThemes(publisher: string, name: string, version: string): Promise<IWorkbenchFileIconTheme[]>;
    private reloadCurrentFileIconTheme;
    restoreFileIconTheme(): Promise<boolean>;
    private applyAndSetFileIconTheme;
    getProductIconThemes(): Promise<IWorkbenchProductIconTheme[]>;
    getProductIconTheme(): ProductIconThemeData;
    get onDidProductIconThemeChange(): Event<IWorkbenchProductIconTheme>;
    setProductIconTheme(iconThemeOrId: string | undefined | IWorkbenchProductIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchProductIconTheme>;
    private internalSetProductIconTheme;
    getMarketplaceProductIconThemes(publisher: string, name: string, version: string): Promise<IWorkbenchProductIconTheme[]>;
    private reloadCurrentProductIconTheme;
    restoreProductIconTheme(): Promise<boolean>;
    private applyAndSetProductIconTheme;
}

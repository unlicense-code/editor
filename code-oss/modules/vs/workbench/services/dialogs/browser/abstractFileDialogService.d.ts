import { IPickAndOpenOptions, ISaveDialogOptions, IOpenDialogOptions, IFileDialogService, IDialogService, ConfirmResult } from 'vs/platform/dialogs/common/dialogs';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IHistoryService } from 'vs/workbench/services/history/common/history';
import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
import { URI } from 'vs/base/common/uri';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ISimpleFileDialog } from 'vs/workbench/services/dialogs/browser/simpleFileDialog';
import { IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IFileService } from 'vs/platform/files/common/files';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { IHostService } from 'vs/workbench/services/host/browser/host';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { ILabelService } from 'vs/platform/label/common/label';
import { IPathService } from 'vs/workbench/services/path/common/pathService';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { ILogService } from 'vs/platform/log/common/log';
export declare abstract class AbstractFileDialogService implements IFileDialogService {
    protected readonly hostService: IHostService;
    protected readonly contextService: IWorkspaceContextService;
    protected readonly historyService: IHistoryService;
    protected readonly environmentService: IWorkbenchEnvironmentService;
    protected readonly instantiationService: IInstantiationService;
    protected readonly configurationService: IConfigurationService;
    protected readonly fileService: IFileService;
    protected readonly openerService: IOpenerService;
    protected readonly dialogService: IDialogService;
    private readonly languageService;
    private readonly workspacesService;
    private readonly labelService;
    private readonly pathService;
    protected readonly commandService: ICommandService;
    protected readonly editorService: IEditorService;
    protected readonly codeEditorService: ICodeEditorService;
    private readonly logService;
    readonly _serviceBrand: undefined;
    constructor(hostService: IHostService, contextService: IWorkspaceContextService, historyService: IHistoryService, environmentService: IWorkbenchEnvironmentService, instantiationService: IInstantiationService, configurationService: IConfigurationService, fileService: IFileService, openerService: IOpenerService, dialogService: IDialogService, languageService: ILanguageService, workspacesService: IWorkspacesService, labelService: ILabelService, pathService: IPathService, commandService: ICommandService, editorService: IEditorService, codeEditorService: ICodeEditorService, logService: ILogService);
    defaultFilePath(schemeFilter?: string): Promise<URI>;
    defaultFolderPath(schemeFilter?: string): Promise<URI>;
    defaultWorkspacePath(schemeFilter?: string): Promise<URI>;
    showSaveConfirm(fileNamesOrResources: (string | URI)[]): Promise<ConfirmResult>;
    private skipDialogs;
    private doShowSaveConfirm;
    protected addFileSchemaIfNeeded(schema: string, _isFolder?: boolean): string[];
    protected pickFileFolderAndOpenSimplified(schema: string, options: IPickAndOpenOptions, preferNewWindow: boolean): Promise<void>;
    protected pickFileAndOpenSimplified(schema: string, options: IPickAndOpenOptions, preferNewWindow: boolean): Promise<void>;
    protected addFileToRecentlyOpened(uri: URI): void;
    protected pickFolderAndOpenSimplified(schema: string, options: IPickAndOpenOptions): Promise<void>;
    protected pickWorkspaceAndOpenSimplified(schema: string, options: IPickAndOpenOptions): Promise<void>;
    protected pickFileToSaveSimplified(schema: string, options: ISaveDialogOptions): Promise<URI | undefined>;
    protected showSaveDialogSimplified(schema: string, options: ISaveDialogOptions): Promise<URI | undefined>;
    protected showOpenDialogSimplified(schema: string, options: IOpenDialogOptions): Promise<URI[] | undefined>;
    protected getSimpleFileDialog(): ISimpleFileDialog;
    private pickResource;
    private saveRemoteResource;
    private getSchemeFilterForWindow;
    protected getFileSystemSchema(options: {
        availableFileSystems?: readonly string[];
        defaultUri?: URI;
    }): string;
    abstract pickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;
    abstract pickFileAndOpen(options: IPickAndOpenOptions): Promise<void>;
    abstract pickFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;
    abstract pickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<void>;
    protected getWorkspaceAvailableFileSystems(options: IPickAndOpenOptions): string[];
    abstract showSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined>;
    abstract showOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined>;
    abstract pickFileToSave(defaultUri: URI, availableFileSystems?: string[]): Promise<URI | undefined>;
    protected getPickFileToSaveDialogOptions(defaultUri: URI, availableFileSystems?: string[]): ISaveDialogOptions;
}

import { IWorkspaceEditingService } from 'vs/workbench/services/workspaces/common/workspaceEditing';
import { URI } from 'vs/base/common/uri';
import { IWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';
import { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';
import { IWorkspaceFolderCreationData, IWorkspacesService, IEnterWorkspaceResult } from 'vs/platform/workspaces/common/workspaces';
import { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { IFileService } from 'vs/platform/files/common/files';
import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
import { IFileDialogService, IDialogService } from 'vs/platform/dialogs/common/dialogs';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IHostService } from 'vs/workbench/services/host/browser/host';
import { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';
import { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';
import { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';
import { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';
import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
export declare abstract class AbstractWorkspaceEditingService implements IWorkspaceEditingService {
    private readonly jsonEditingService;
    protected readonly contextService: WorkspaceService;
    private readonly configurationService;
    private readonly notificationService;
    private readonly commandService;
    private readonly fileService;
    private readonly textFileService;
    protected readonly workspacesService: IWorkspacesService;
    protected readonly environmentService: IWorkbenchEnvironmentService;
    private readonly fileDialogService;
    protected readonly dialogService: IDialogService;
    protected readonly hostService: IHostService;
    protected readonly uriIdentityService: IUriIdentityService;
    private readonly workspaceTrustManagementService;
    private readonly userDataProfilesService;
    private readonly userDataProfileService;
    readonly _serviceBrand: undefined;
    constructor(jsonEditingService: IJSONEditingService, contextService: WorkspaceService, configurationService: IWorkbenchConfigurationService, notificationService: INotificationService, commandService: ICommandService, fileService: IFileService, textFileService: ITextFileService, workspacesService: IWorkspacesService, environmentService: IWorkbenchEnvironmentService, fileDialogService: IFileDialogService, dialogService: IDialogService, hostService: IHostService, uriIdentityService: IUriIdentityService, workspaceTrustManagementService: IWorkspaceTrustManagementService, userDataProfilesService: IUserDataProfilesService, userDataProfileService: IUserDataProfileService);
    pickNewWorkspacePath(): Promise<URI | undefined>;
    private getNewWorkspaceName;
    updateFolders(index: number, deleteCount?: number, foldersToAddCandidates?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    private doUpdateFolders;
    addFolders(foldersToAddCandidates: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    private doAddFolders;
    removeFolders(foldersToRemove: URI[], donotNotifyError?: boolean): Promise<void>;
    private includesSingleFolderWorkspace;
    createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void>;
    saveAndEnterWorkspace(workspaceUri: URI): Promise<void>;
    isValidTargetWorkspacePath(workspaceUri: URI): Promise<boolean>;
    protected saveWorkspaceAs(workspace: IWorkspaceIdentifier, targetConfigPathURI: URI): Promise<void>;
    protected saveWorkspace(workspace: IWorkspaceIdentifier): Promise<void>;
    private handleWorkspaceConfigurationEditingError;
    private onInvalidWorkspaceConfigurationFileError;
    private onWorkspaceConfigurationFileDirtyError;
    private askToOpenWorkspaceConfigurationFile;
    abstract enterWorkspace(workspaceUri: URI): Promise<void>;
    protected doEnterWorkspace(workspaceUri: URI): Promise<IEnterWorkspaceResult | undefined>;
    private migrateWorkspaceSettings;
    copyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void>;
    private doCopyWorkspaceSettings;
    private trustWorkspaceConfiguration;
    protected getCurrentWorkspaceIdentifier(): IWorkspaceIdentifier | undefined;
}

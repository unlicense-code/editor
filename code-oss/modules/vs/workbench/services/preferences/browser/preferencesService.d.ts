import { Disposable } from 'vs/base/common/lifecycle';
import { URI } from 'vs/base/common/uri';
import { ITextModel } from 'vs/editor/common/model';
import { IModelService } from 'vs/editor/common/services/model';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { ITextModelService } from 'vs/editor/common/services/resolverService';
import { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ILabelService } from 'vs/platform/label/common/label';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IEditorPane } from 'vs/workbench/common/editor';
import { EditorInput } from 'vs/workbench/common/editor/editorInput';
import { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';
import { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IKeybindingsEditorOptions, IOpenSettingsOptions, IPreferencesEditorModel, IPreferencesService, ISetting } from 'vs/workbench/services/preferences/common/preferences';
import { SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
import { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
import { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';
import { ITextEditorService } from 'vs/workbench/services/textfile/common/textEditorService';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';
import { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';
export declare class PreferencesService extends Disposable implements IPreferencesService {
    private readonly editorService;
    private readonly editorGroupService;
    private readonly textFileService;
    private readonly configurationService;
    private readonly notificationService;
    private readonly contextService;
    private readonly instantiationService;
    private readonly userDataProfileService;
    private readonly userDataProfilesService;
    private readonly textModelResolverService;
    private readonly modelService;
    private readonly jsonEditingService;
    private readonly languageService;
    private readonly labelService;
    private readonly remoteAgentService;
    private readonly textEditorService;
    readonly _serviceBrand: undefined;
    private readonly _onDispose;
    private _defaultUserSettingsContentModel;
    private _defaultWorkspaceSettingsContentModel;
    private _defaultFolderSettingsContentModel;
    constructor(editorService: IEditorService, editorGroupService: IEditorGroupsService, textFileService: ITextFileService, configurationService: IConfigurationService, notificationService: INotificationService, contextService: IWorkspaceContextService, instantiationService: IInstantiationService, userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService, textModelResolverService: ITextModelService, keybindingService: IKeybindingService, modelService: IModelService, jsonEditingService: IJSONEditingService, languageService: ILanguageService, labelService: ILabelService, remoteAgentService: IRemoteAgentService, textEditorService: ITextEditorService);
    readonly defaultKeybindingsResource: URI;
    private readonly defaultSettingsRawResource;
    get userSettingsResource(): URI;
    get workspaceSettingsResource(): URI | null;
    get settingsEditor2Input(): SettingsEditor2Input;
    getFolderSettingsResource(resource: URI): URI | null;
    resolveModel(uri: URI): ITextModel | null;
    createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null>;
    openRawDefaultSettings(): Promise<IEditorPane | undefined>;
    openRawUserSettings(): Promise<IEditorPane | undefined>;
    private shouldOpenJsonByDefault;
    openSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openLanguageSpecificSettings(languageId: string, options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    private open;
    private openSettings2;
    openApplicationSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openUserSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openRemoteSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openWorkspaceSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openFolderSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void>;
    openDefaultKeybindingsFile(): Promise<IEditorPane | undefined>;
    private openSettingsJson;
    private doOpenSettingsJson;
    private doOpenSplitJSON;
    createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): EditorInput;
    createSettings2EditorModel(): Settings2EditorModel;
    private getConfigurationTargetFromDefaultSettingsResource;
    private isDefaultSettingsResource;
    private isDefaultUserSettingsResource;
    private isDefaultWorkspaceSettingsResource;
    private isDefaultFolderSettingsResource;
    private getDefaultSettingsResource;
    private getOrCreateEditableSettingsEditorInput;
    private createEditableSettingsEditorModel;
    private createDefaultSettingsEditorModel;
    private getDefaultSettings;
    getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null>;
    private createSettingsIfNotExists;
    private createIfNotExists;
    private getMostCommonlyUsedSettings;
    private revealSetting;
    private getPositionToReveal;
    dispose(): void;
}

import { IUserDataSyncService, IAuthenticationProvider, IUserDataAutoSyncService, IUserDataSyncStoreManagementService, IUserDataSyncEnablementService, IUserDataSyncResource, IResourcePreview } from 'vs/platform/userDataSync/common/userDataSync';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IUserDataSyncWorkbenchService, IUserDataSyncAccount, AccountStatus } from 'vs/workbench/services/userDataSync/common/userDataSync';
import { Disposable } from 'vs/base/common/lifecycle';
import { Event } from 'vs/base/common/event';
import { AuthenticationSession, IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';
import { IUserDataSyncAccountService } from 'vs/platform/userDataSync/common/userDataSyncAccount';
import { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ILogService } from 'vs/platform/log/common/log';
import { IProductService } from 'vs/platform/product/common/productService';
import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IProgressService } from 'vs/platform/progress/common/progress';
import { URI } from 'vs/base/common/uri';
import { IViewsService, IViewDescriptorService } from 'vs/workbench/common/views';
import { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICredentialsService } from 'vs/platform/credentials/common/credentials';
import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';
declare class UserDataSyncAccount implements IUserDataSyncAccount {
    readonly authenticationProviderId: string;
    private readonly session;
    constructor(authenticationProviderId: string, session: AuthenticationSession);
    get sessionId(): string;
    get accountName(): string;
    get accountId(): string;
    get token(): string;
}
declare type MergeEditorInput = {
    base: URI;
    input1: {
        uri: URI;
    };
    input2: {
        uri: URI;
    };
    result: URI;
};
export declare function isMergeEditorInput(editor: unknown): editor is MergeEditorInput;
export declare class UserDataSyncWorkbenchService extends Disposable implements IUserDataSyncWorkbenchService {
    private readonly userDataSyncService;
    private readonly uriIdentityService;
    private readonly authenticationService;
    private readonly userDataSyncAccountService;
    private readonly quickInputService;
    private readonly storageService;
    private readonly userDataSyncEnablementService;
    private readonly userDataAutoSyncService;
    private readonly telemetryService;
    private readonly logService;
    private readonly productService;
    private readonly extensionService;
    private readonly environmentService;
    private readonly credentialsService;
    private readonly notificationService;
    private readonly progressService;
    private readonly dialogService;
    private readonly viewsService;
    private readonly viewDescriptorService;
    private readonly userDataSyncStoreManagementService;
    private readonly lifecycleService;
    private readonly instantiationService;
    private readonly editorService;
    _serviceBrand: any;
    private static DONOT_USE_WORKBENCH_SESSION_STORAGE_KEY;
    private static CACHED_SESSION_STORAGE_KEY;
    get enabled(): boolean;
    private _authenticationProviders;
    get authenticationProviders(): IAuthenticationProvider[];
    private _accountStatus;
    get accountStatus(): AccountStatus;
    private readonly _onDidChangeAccountStatus;
    readonly onDidChangeAccountStatus: Event<AccountStatus>;
    private _all;
    get all(): UserDataSyncAccount[];
    get current(): UserDataSyncAccount | undefined;
    private readonly syncEnablementContext;
    private readonly syncStatusContext;
    private readonly accountStatusContext;
    private readonly enableConflictsViewContext;
    private readonly hasConflicts;
    private readonly activityViewsEnablementContext;
    private turnOnSyncCancellationToken;
    constructor(userDataSyncService: IUserDataSyncService, uriIdentityService: IUriIdentityService, authenticationService: IAuthenticationService, userDataSyncAccountService: IUserDataSyncAccountService, quickInputService: IQuickInputService, storageService: IStorageService, userDataSyncEnablementService: IUserDataSyncEnablementService, userDataAutoSyncService: IUserDataAutoSyncService, telemetryService: ITelemetryService, logService: ILogService, productService: IProductService, extensionService: IExtensionService, environmentService: IWorkbenchEnvironmentService, credentialsService: ICredentialsService, notificationService: INotificationService, progressService: IProgressService, dialogService: IDialogService, contextKeyService: IContextKeyService, viewsService: IViewsService, viewDescriptorService: IViewDescriptorService, userDataSyncStoreManagementService: IUserDataSyncStoreManagementService, lifecycleService: ILifecycleService, instantiationService: IInstantiationService, editorService: IEditorService);
    private updateAuthenticationProviders;
    private isSupportedAuthenticationProviderId;
    private waitAndInitialize;
    private initialize;
    private update;
    private getAccounts;
    private updateToken;
    private updateAccountStatus;
    turnOn(): Promise<void>;
    turnOnUsingCurrentAccount(): Promise<void>;
    turnoff(everywhere: boolean): Promise<void>;
    synchroniseUserDataSyncStoreType(): Promise<void>;
    syncNow(): Promise<void>;
    private doTurnOnSync;
    private handleConflictsWhileTurningOn;
    accept(resource: IUserDataSyncResource, conflictResource: URI, content: string | null | undefined, apply: boolean | {
        force: boolean;
    }): Promise<void>;
    showConflicts(conflictToOpen?: IResourcePreview): Promise<void>;
    resetSyncedData(): Promise<void>;
    showSyncActivity(): Promise<void>;
    private waitForActiveSyncViews;
    private isCurrentAccount;
    signIn(): Promise<void>;
    private pick;
    private doPick;
    private createQuickpickItems;
    private switch;
    private onDidSuccessiveAuthFailures;
    private onDidChangeSessions;
    private onDidChangeStorage;
    private _cachedCurrentSessionId;
    private get currentSessionId();
    private set currentSessionId(value);
    private getStoredCachedSessionId;
    private get useWorkbenchSessionId();
    private set useWorkbenchSessionId(value);
}
export {};

import { Event } from 'vs/base/common/event';
import { ILanguageService } from 'vs/editor/common/languages/language';
import { ILogService } from 'vs/platform/log/common/log';
import { INotificationService } from 'vs/platform/notification/common/notification';
import { ITextMateService } from 'vs/workbench/services/textMate/browser/textMate';
import { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';
import type { IGrammar, IRawTheme } from 'vscode-textmate';
import { Disposable } from 'vs/base/common/lifecycle';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IValidGrammarDefinition } from 'vs/workbench/services/textMate/common/TMScopeRegistry';
import { TMGrammarFactory } from 'vs/workbench/services/textMate/common/TMGrammarFactory';
import { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';
import { IProgressService } from 'vs/platform/progress/common/progress';
export declare abstract class AbstractTextMateService extends Disposable implements ITextMateService {
    protected readonly _languageService: ILanguageService;
    private readonly _themeService;
    protected readonly _extensionResourceLoaderService: IExtensionResourceLoaderService;
    private readonly _notificationService;
    private readonly _logService;
    private readonly _configurationService;
    private readonly _progressService;
    _serviceBrand: undefined;
    private readonly _onDidEncounterLanguage;
    readonly onDidEncounterLanguage: Event<string>;
    private readonly _styleElement;
    private readonly _createdModes;
    private readonly _encounteredLanguages;
    private _debugMode;
    private _debugModePrintFunc;
    private _grammarDefinitions;
    private _grammarFactory;
    private _tokenizersRegistrations;
    protected _currentTheme: IRawTheme | null;
    protected _currentTokenColorMap: string[] | null;
    constructor(_languageService: ILanguageService, _themeService: IWorkbenchThemeService, _extensionResourceLoaderService: IExtensionResourceLoaderService, _notificationService: INotificationService, _logService: ILogService, _configurationService: IConfigurationService, _progressService: IProgressService);
    startDebugMode(printFn: (str: string) => void, onStop: () => void): void;
    private _canCreateGrammarFactory;
    private _getOrCreateGrammarFactory;
    private _createFactory;
    private static _toColorMap;
    private _updateTheme;
    protected _doUpdateTheme(grammarFactory: TMGrammarFactory | null, theme: IRawTheme, tokenColorMap: string[]): void;
    private static equalsTokenRules;
    private _validateGrammarExtensionPoint;
    createGrammar(languageId: string): Promise<IGrammar | null>;
    protected _onDidCreateGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): void;
    protected _onDidDisposeGrammarFactory(): void;
    private _vscodeOniguruma;
    private _getVSCodeOniguruma;
    private _doGetVSCodeOniguruma;
    protected abstract _loadVSCodeOnigurumWASM(): Promise<Response | ArrayBuffer>;
}

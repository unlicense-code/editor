import { WebContents } from 'electron';
import { Event } from 'vs/base/common/event';
import { Disposable } from 'vs/base/common/lifecycle';
import { IProcessEnvironment } from 'vs/base/common/platform';
import { IBackupMainService } from 'vs/platform/backup/electron-main/backup';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';
import { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';
import { IFileService } from 'vs/platform/files/common/files';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';
import { ILogService } from 'vs/platform/log/common/log';
import { IProductService } from 'vs/platform/product/common/productService';
import { IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';
import { IStateMainService } from 'vs/platform/state/electron-main/state';
import { IOpenEmptyWindowOptions } from 'vs/platform/window/common/window';
import { IOpenConfiguration, IOpenEmptyConfiguration, IWindowsCountChangedEvent, IWindowsMainService } from 'vs/platform/windows/electron-main/windows';
import { IWorkspacesHistoryMainService } from 'vs/platform/workspaces/electron-main/workspacesHistoryMainService';
import { IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';
import { ICodeWindow } from 'vs/platform/window/electron-main/window';
import { IThemeMainService } from 'vs/platform/theme/electron-main/themeMainService';
import { IPolicyService } from 'vs/platform/policy/common/policy';
import { IUserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';
export declare class WindowsMainService extends Disposable implements IWindowsMainService {
    private readonly machineId;
    private readonly initialUserEnv;
    private readonly logService;
    private readonly stateMainService;
    private readonly policyService;
    private readonly environmentMainService;
    private readonly userDataProfilesMainService;
    private readonly lifecycleMainService;
    private readonly backupMainService;
    private readonly configurationService;
    private readonly workspacesHistoryMainService;
    private readonly workspacesManagementMainService;
    private readonly instantiationService;
    private readonly dialogMainService;
    private readonly fileService;
    private readonly productService;
    private readonly protocolMainService;
    private readonly themeMainService;
    readonly _serviceBrand: undefined;
    private static readonly WINDOWS;
    private readonly _onDidOpenWindow;
    readonly onDidOpenWindow: Event<ICodeWindow>;
    private readonly _onDidSignalReadyWindow;
    readonly onDidSignalReadyWindow: Event<ICodeWindow>;
    private readonly _onDidDestroyWindow;
    readonly onDidDestroyWindow: Event<ICodeWindow>;
    private readonly _onDidChangeWindowsCount;
    readonly onDidChangeWindowsCount: Event<IWindowsCountChangedEvent>;
    private readonly _onDidTriggerSystemContextMenu;
    readonly onDidTriggerSystemContextMenu: Event<{
        window: ICodeWindow;
        x: number;
        y: number;
    }>;
    private readonly windowsStateHandler;
    constructor(machineId: string, initialUserEnv: IProcessEnvironment, logService: ILogService, stateMainService: IStateMainService, policyService: IPolicyService, environmentMainService: IEnvironmentMainService, userDataProfilesMainService: IUserDataProfilesMainService, lifecycleMainService: ILifecycleMainService, backupMainService: IBackupMainService, configurationService: IConfigurationService, workspacesHistoryMainService: IWorkspacesHistoryMainService, workspacesManagementMainService: IWorkspacesManagementMainService, instantiationService: IInstantiationService, dialogMainService: IDialogMainService, fileService: IFileService, productService: IProductService, protocolMainService: IProtocolMainService, themeMainService: IThemeMainService);
    private registerListeners;
    openEmptyWindow(openConfig: IOpenEmptyConfiguration, options?: IOpenEmptyWindowOptions): Promise<ICodeWindow[]>;
    openExistingWindow(window: ICodeWindow, openConfig: IOpenConfiguration): void;
    open(openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;
    private handleWaitMarkerFile;
    private doOpen;
    private doOpenFilesInExistingWindow;
    private doAddFoldersToExistingWindow;
    private doOpenEmpty;
    private doOpenFolderOrWorkspace;
    private getPathsToOpen;
    private doExtractPathsFromAPI;
    private doExtractPathsFromCLI;
    private cliArgToUri;
    private doGetPathsFromLastSession;
    private getRestoreWindowsSetting;
    private resolveOpenable;
    private doResolveRemoteOpenable;
    private resourceFromOpenable;
    private doResolveFilePath;
    private doResolveRemotePath;
    private shouldOpenNewWindow;
    openExtensionDevelopmentHostWindow(extensionDevelopmentPaths: string[], openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;
    private openInBrowserWindow;
    private doOpenInBrowserWindow;
    private resolveProfileForBrowserWindow;
    private onWindowClosed;
    getFocusedWindow(): ICodeWindow | undefined;
    getLastActiveWindow(): ICodeWindow | undefined;
    private getLastActiveWindowForAuthority;
    private doGetLastActiveWindow;
    sendToFocused(channel: string, ...args: any[]): void;
    sendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void;
    getWindows(): ICodeWindow[];
    getWindowCount(): number;
    getWindowById(windowId: number): ICodeWindow | undefined;
    getWindowByWebContents(webContents: WebContents): ICodeWindow | undefined;
}
